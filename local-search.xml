<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Image Interpolation</title>
    <link href="/2022/03/04/2022-3-4-Image-Interpolation/"/>
    <url>/2022/03/04/2022-3-4-Image-Interpolation/</url>
    
    <content type="html"><![CDATA[<h1 id="image-interpolation">Image Interpolation</h1><ul><li><a href="#image-interpolation">Image Interpolation</a><ul><li><a href="#objectives">Objectives</a></li><li><a href="#principle">Principle</a><ul><li><a href="#geometric-center-alignment">Geometric CenterAlignment</a></li><li><a href="#nearest-neighbor-interpolation">Nearest NeighborInterpolation</a><ul><li><a href="#derivation">Derivation</a></li><li><a href="#pseudo-code">Pseudo Code</a></li></ul></li><li><a href="#bilinear-interpolation">Bilinear Interpolation</a><ul><li><a href="#derivation-1">Derivation</a></li><li><a href="#pseudo-code-1">Pseudo Code</a></li></ul></li><li><a href="#bicubic-interpolation">Bicubic Interpolation</a><ul><li><a href="#derivation-2">Derivation</a></li><li><a href="#pseudo-code-2">Pseudo Code</a></li></ul></li></ul></li><li><a href="#analysis">Analysis</a><ul><li><a href="#brief-results">Brief Results</a></li><li><a href="#nearest-neighbor-interpolation-1">Nearest NeighborInterpolation</a></li><li><a href="#bilinear-interpolation-1">Bilinear Interpolation</a></li><li><a href="#time-complexity-analysis">Time Complexity Analysis</a><ul><li><a href="#enlarge">Enlarge</a></li><li><a href="#shrunk">Shrunk</a></li></ul></li></ul></li><li><a href="#reference">Reference</a></li></ul></li></ul><h2 id="objectives">Objectives</h2><p>The task of this lab homework is to understand and accomplish codesdesign for <em>nearest neighbor interpolation, bilinear interpolationand bicubic interpolation</em> in python. The specific implementation ofthese algorithms is packed in corresponding <code>.py</code> files, thereport and test codes are embedded in the <code>.ipynb</code> file. Thereport contains the derivations, principles and Pseudo codes of thealgorithms mentioned above, and then given some optimization, extensionand analysis of the results.</p><p>Image Interpolation is a significant issue in DIP, we need it whenresizing or distorting images from one pixel grid to another. Therefore,the effect and time consumed by varied interpolation algorithms areextraordinarily important. <strong>However, There is always trade-offbetween efficiency and effect</strong>.</p><h2 id="principle">Principle</h2><h3 id="geometric-center-alignment">Geometric Center Alignment</h3><p>Actually, during interpolation we view pixel positions not asinteger, but as float values, this understanding helps when implementingthose interpolation algorithms. The meaning of geometric centeralignment is that the original figure and the new figure should bealigned based on the image center, not the left side. To achieve this, acoordinate transform is essential, here is an example as the figureshows (sampling from 4 to 5):</p><p><span class="math display">\[transform factor \ \alpha=\frac{src size}{dst size} \\src=(dst+0.5)\times\alpha-0.5\]</span> If I want to find the position of A' in float, or find theindex of its neighbors. Here is the calculation:</p><p><span class="math display">\[\alpha=\frac{5}{4} \\A=(dst+0.5)\times\alpha \\idx_{left}=floor(A-0.5) \\idx_{right}=ceil(A-0.5)\]</span></p><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/DIP/interpolation_figure1.jpeg" height="175"></center><center>fig-1 example of center alignment</center><h3 id="nearest-neighbor-interpolation">Nearest NeighborInterpolation</h3><h4 id="derivation">Derivation</h4><p>Nearest interpolation is a very simple interpolation method. For anew point of the resized figure, its value is the same with the nearestpoint of the original figure. The approach we find this nearest point isby using <code>round</code> operation after calculate the position ofthe new point in the original coordinate(multiply a factor of <spanclass="math inline">\(\frac{original dimension}{newdimension}\)</span>). Note that before all these operations, we need totransform the indices for center alignment.</p><p>For example, the following <em>fig-2</em> shows an original figure ofsize 2 x 2, we want to enlarge it to size 3 x 3. Assume <spanclass="math inline">\((x, y)\)</span> is a point of the resized figure,then its position in the original frame is <spanclass="math inline">\((2x/3, 2x/3)\)</span>. The result often is a floatvector, then round it to integer, e.g., <span class="math inline">\((1,2) \to (0.67, 1.33) \to (1, 1)\)</span>. Shrunk is similar withenlarging.</p><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/DIP/interpolation_figure2.jpeg" height="300"></center><center>fig-2 example of nearest neighbor</center><h4 id="pseudo-code">Pseudo Code</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><pre><code class="hljs pseudocode">// nearest_11910206<br>begin with parameters input_file, [h_new, w_new]<br><br>    // get input array from filename or just array<br>    error handling<br>    array input_raw<br><br>    // get resize factor, the \alpha mentioned above<br>    float h_fac, w_fac<br>    compute h_fac = h_raw / h_new<br>    compute w_fac = w_raw / w_new<br><br>    // get bias values for center alignment<br>    array interpolated<br>    bias float h_bias, w_bias<br>    compute h_bias = 0.5 * h_fac - 0.5<br>    compute w_bias = 0.5 * w_fac - 0.5<br><br>    // two `for` loops to iterate all items in array interpolated<br>    for index i<br>        for index j<br><br>            // get the nearest neighbor&#x27;s index [h_idx, w_idx]<br>            integer h_idx, w_idx<br>            compute h_idx = round(h_bias + h_fac * i)<br>            compute w_idx = round(w_bias + w_fac * j)<br>            update interpolated[i, j]<br><br>    return interpolated<br>end<br></code></pre></td></tr></table></figure><h3 id="bilinear-interpolation">Bilinear Interpolation</h3><h4 id="derivation-1">Derivation</h4><p><strong>Using repeated linearinterpolation:</strong><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded" aria-label="Bilinear_interpolation.https://en.wikipedia.org/wiki/Bilinear_interpolation.">[1]</span></a></sup></p><p>First consider a linear interpolation example in 1-D, like thefollowing figure. The value of f(x) can be expressed by the two neighborpoints: <spanclass="math inline">\(f(x)=\frac{x_2-x}{x_2-x_1}f(x_1)+\frac{x-x_1}{x_2-x_1}f(x_2)\)</span>.Therefore, f(x) can be seen as a weighted average of f(x_1) and f(x_2).<strong>Significantly, the border condition of bilinear interpolationcan be regarded as linear condition during implementation</strong>.Besides, <span class="math inline">\(x_2-x_1\)</span> normally equal toone in image interpolation because the operation is down pixel bypixel.</p><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/DIP/interpolation_figure4.jpeg" height="150"></center><center>fig-3 linear interpolation</center><p>Then, extend the conclusion to 2-D. Actually, bilinear interpolationis not linear in the whole process but quadratic in the sample location<em>P</em>, it could be expressed in a bilinear polynomial form: <spanclass="math inline">\(f(x,y)=a_{00}+a_{10}x+a_{01}y+a_{11}xy\)</span>.The basic derivation is by repeat linear interpolation twice. As shownin the figure below, first sample along x-axis:</p><p><span class="math display">\[\begin{equation}\begin{aligned}f(x,y_1) &amp; =\frac{x_2-x}{x_2-x_1}f(Q_1)+\frac{x-x_1}{x_2-x_1}f(Q_2)\\         &amp; =(x_2-x)f(Q_1)+(x-x_1)f(Q_2) \\f(x,y_2) &amp; =\frac{x_2-x}{x_2-x_1}f(Q_3)+\frac{x-x_1}{x_2-x_1}f(Q_4)\\         &amp; =(x_2-x)f(Q_3)+(x-x_1)f(Q_4)\end{aligned}\end{equation}\]</span> Then sample along y-axis (the sequence of sampling along x andy axes can exchange), writing the equation of f(x, y) in matrixform:</p><p><span class="math display">\[\begin{equation}\begin{aligned}f(x,y) &amp;=\frac{y_2-y}{y_2-y_1}f(x,y_1)+\frac{y-y_1}{y_2-y_1}f(x,y_2) \\       &amp;=\frac{y_2-y}{y_2-y_1}[(x_2-x)f(Q_1)+(x-x_1)f(Q_2)]+\frac{y-y_1}{y_2-y_1}[(x_2-x)f(Q_3)+(x-x_1)f(Q_4)]\\       &amp; =\begin{bmatrix}          x_2-x &amp; x-x_1          \end{bmatrix}          \begin{bmatrix}          f(Q_3) &amp; f(Q_1) \\ f(Q_4) &amp; f(Q_2)          \end{bmatrix}          \begin{bmatrix}          y_2-y \\ y-y_1          \end{bmatrix}\end{aligned}\end{equation}\]</span> The points lie in the margin of the <strong>enlarged</strong>figure can be dealt with separately, because it only has 3 or 1 (in thecorner) neighbors. Therefore, I do linear interpolation for the pointsin the margin.</p><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/DIP/interpolation_figure5.jpeg" height="225"></center><center>fig-4 bilinear interpolation</center><p><strong>Using Polynomial to fit:</strong></p><p>As mentioned above, f(x, y) could be written as a multilinearpolynomial, therefore using the values of the 4 neighbor points, we canget: $$ <span class="math display">\[\begin{align}f(x, y) &amp; \approx a_{00}+a_{10}x+a_{01}y+a_{11}xy \\        &amp; \Rightarrow [f(Q_3) \ f(Q_1) \ f(Q_4) \ f(Q_2)]^T \\        \\\begin{pmatrix}f(Q_3) \\ f(Q_1) \\ f(Q_4) \\ f(Q_2)\end{pmatrix} &amp; =\begin{pmatrix}1 &amp; x_1 &amp; y_1 &amp; x_1y_1 \\1 &amp; x_1 &amp; y_2 &amp; x_1y_2 \\1 &amp; x_2 &amp; y_1 &amp; x_2y_1 \\1 &amp; x_2 &amp; y_2 &amp; x_2y_2 \\\end{pmatrix}\begin{pmatrix}a_{00} \\ a_{10} \\ a_{01} \\ a_{11}\end{pmatrix} \\\\\begin{pmatrix}a_{00} \\ a_{10} \\ a_{01} \\ a_{11}\end{pmatrix} &amp; = \frac{1}{(x_2-x_1)(y_2-y_1)}\begin{pmatrix}x_2y_2 &amp; -x_2y_1 &amp; -x_1y_2 &amp; x_1y_1 \\-y_2 &amp; y_1 &amp; y_2 &amp; -y_1 \\-x_2 &amp; x_2 &amp; x_1 &amp; -x_1 \\1 &amp; -1 &amp; -1 &amp; 1 \\\end{pmatrix}\begin{pmatrix}f(Q_3) \\ f(Q_1) \\ f(Q_4) \\ f(Q_2)\end{pmatrix} \\\\              &amp; =\begin{pmatrix}x_2y_2 &amp; -x_2y_1 &amp; -x_1y_2 &amp; x_1y_1 \\-y_2 &amp; y_1 &amp; y_2 &amp; -y_1 \\-x_2 &amp; x_2 &amp; x_1 &amp; -x_1 \\1 &amp; -1 &amp; -1 &amp; 1 \\\end{pmatrix}\begin{pmatrix}f(Q_3) \\ f(Q_1) \\ f(Q_4) \\ f(Q_2)\end{pmatrix} \\\\f(x,y) &amp; =\begin{pmatrix}1 &amp; x &amp; y &amp; xy\end{pmatrix}\begin{pmatrix}x_2y_2 &amp; -x_2y_1 &amp; -x_1y_2 &amp; x_1y_1 \\-y_2 &amp; y_1 &amp; y_2 &amp; -y_1 \\-x_2 &amp; x_2 &amp; x_1 &amp; -x_1 \\1 &amp; -1 &amp; -1 &amp; 1 \\\end{pmatrix}\begin{pmatrix}f(Q_3) \\ f(Q_1) \\ f(Q_4) \\ f(Q_2)\end{pmatrix} \\\end{align}\]</span> $$ <strong>Using Weighted Mean</strong></p><p>In another view, as mentioned we can see the interpolation asweighted average over the 4 neighbor values, therefore we can a vector<span class="math inline">\(w\)</span> to denote the weights. <spanclass="math display">\[\begin{align}f(x, y) &amp; \approxw_{1}f(Q_{1})+w_{2}f(Q_{2})+w_{3}f(Q_{3})+w_{4}f(Q_{4}) \\        &amp; =\begin{pmatrix}f(Q_3) &amp; f(Q_1) &amp; f(Q_4) &amp; f(Q_2)\end{pmatrix}\begin{pmatrix}w_3 \\ w_1 \\ w_4 \\ w_2\end{pmatrix}\end{align}\]</span> Substitute the knowledge of the former polynomial principle,we can get the following result. The weights must add up to 1 fordifferent order of terms. Then extract the weights by do inversing, weget a new matrix form for bilinear interpolation. <spanclass="math display">\[\begin{align}\begin{pmatrix}1 \\ x \\ y \\ xy\end{pmatrix}&amp; =\begin{pmatrix}1 &amp; 1 &amp; 1 &amp; 1 \\x_1 &amp; x_1 &amp; x_2 &amp; x_2 \\y_1 &amp; y_2 &amp; y_1 &amp; y_2 \\x_1y_1 &amp; x_1y_2 &amp; x_2y_1 &amp; x_2y_2\end{pmatrix}\begin{pmatrix}w_3 \\ w_1 \\ w_4 \\ w_2\end{pmatrix} \\\\f(x,y) &amp; =\begin{pmatrix}f(Q_3) &amp; f(Q_1) &amp; f(Q_4) &amp; f(Q_2)\end{pmatrix}\begin{pmatrix}w_3 \\ w_1 \\ w_4 \\ w_2\end{pmatrix} \\&amp; = \frac{1}{(x_2-x_1)(y_2-y_1)}\begin{pmatrix}f(Q_3) &amp; f(Q_1) &amp; f(Q_4) &amp; f(Q_2)\end{pmatrix}\begin{pmatrix}x_2y_2 &amp; -y_2 &amp; -x_2 &amp; 1 \\-x_2y_1 &amp; y_1 &amp; x_2 &amp; -1 \\-x_1y_2 &amp; y_2 &amp; x_1 &amp; -1 \\x_1y_1 &amp; -y_1 &amp; -x_1 &amp; 1\end{pmatrix}\begin{pmatrix}1 \\ x \\ y \\ xy\end{pmatrix} \\&amp; =\begin{pmatrix}f(Q_3) &amp; f(Q_1) &amp; f(Q_4) &amp; f(Q_2)\end{pmatrix}\begin{pmatrix}x_2y_2 &amp; -y_2 &amp; -x_2 &amp; 1 \\-x_2y_1 &amp; y_1 &amp; x_2 &amp; -1 \\-x_1y_2 &amp; y_2 &amp; x_1 &amp; -1 \\x_1y_1 &amp; -y_1 &amp; -x_1 &amp; 1\end{pmatrix}\begin{pmatrix}1 \\ x \\ y \\ xy\end{pmatrix}\end{align}\]</span> However, it is easy to discover that this matrix form hasstrong similarity with the one derived from polynomial fitting. In myintuition this methods have the same time complexity with the last one,therefore I do not implement this method to codes.</p><h4 id="pseudo-code-1">Pseudo Code</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs pseudocode">// bilinear_11910206<br>begin with parameters input_file, [h_new, w_new]<br><br>    // get input array from filename or just array<br>    error handling<br>    array input_raw<br><br>    // get resize factor, the \alpha mentioned above<br>    float h_fac, w_fac<br>    compute h_fac = h_raw / h_new<br>    compute w_fac = w_raw / w_new<br><br>    // get bias values for center alignment<br>    array interpolated<br>    bias float h_bias, w_bias<br>    compute h_bias = 0.5 * h_fac - 0.5<br>    compute w_bias = 0.5 * w_fac - 0.5<br><br>    // get the indexes that represent margins<br>    integer h_max, w_max, h_margin, w_margin<br>    compute h_max = h_raw - 1<br>    compute w_raw = w_raw - 1<br>    compute h_margin = floor(0.5 / h_fac + 0.5)<br>    compute h_margin = floor(0.5 / w_fac + 0.5)<br><br>    // assign values for the 4 corners<br>    interpolated[left-top] = input_raw[0, 0]<br>    interpolated[right-top] = input_raw[0, w_raw]<br>    interpolated[left-down] = input_raw[h_max, 0]<br>    interpolated[right-down] = input_raw[h_max, w_raw]<br><br>    // assign values for the 4 borderline margins<br>    for index j<br><br>        // handle 2 horizontal borderline margins<br>        float y<br>        integer y1, y2<br>        compute y = w_bias + w_fac * j<br>        compute y1 = floor(y)<br>        compute y2 = ceil(y)<br><br>        // do linear intepolation in y direction<br>        interpolated[left-border] = (y2 - y) * input_raw[0, y1] + (y - y1) * input_raw[0, y2]<br>        interpolated[right-border] = (y2 - y) * input_raw[h_max, y1] + (y - y1) * input_raw[h_max, y2]<br><br>    for index i<br><br>        // handle 2 vertical borderline margins<br>        float x<br>        integer x1, x2<br>        compute x = h_bias + h_fac * i<br>        compute x1 = floor(x)<br>        compute x2 = ceil(x)<br><br>        // do linear intepolation in x direction<br>        interpolated[up-border] = (x2 - x) * input_raw[x1, 0] + (x - x1) * input_raw[x2, 0]<br>        interpolated[down-border] = (x2 - x) * input_raw[x1, w_max] + (x - x1) * input_raw[x2, x_max]<br><br>    // embedded 2 `for` loops to iterate all items in the center part<br>    for index i exclude margin<br>        for index j exclude margin<br>            float x, y<br>            integer x1, y1, x2, y2<br>            compute x = h_bias + h_fac * i<br>            compute y = w_bias + w_fac * j<br>            compute x1 = floor(x)<br>            compute y1 = floor(y)<br>            compute x2 = ceil(x)<br>            compute y2 = ceil(y)<br><br>            update interpolated[i, j]<br>            compute f(x, y) // equations are given above for different methods<br><br>    return interpolated<br>end<br></code></pre></td></tr></table></figure><h3 id="bicubic-interpolation">Bicubic Interpolation</h3><h4 id="derivation-2">Derivation</h4><p>According to the paper in IEEE, I learn this convolution method forbicubic interpolation (there are otherapproaches).<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="Cubic convolution interpolation for digital image processing">[3]</span></a></sup> The strategy is like the polynomial and weightmethod of bilinear interpolation, but this time we have 16 coefficientsrather than 4. The general function is: <span class="math display">\[\sum^{3}_{i=0}\sum^{3}_{j=0}a_{ij}x^iy^j\]</span> The crucial objective is to solve the <spanclass="math inline">\(a_{ij}\)</span> coefficients. The paper introducesa BiCubic function: <span class="math display">\[\begin{align}W(x) &amp; =\left\{\begin{aligned}&amp; (a+2)|x|^3-(a+3)|x|^2 +1 &amp;     &amp; {for \ |x|\leqslant1} \\&amp; a|x|^3-5a|x|^2+8a|x|-4a &amp;     &amp; {for \ 1&lt;|x|&lt;2} \\&amp; 0 &amp;     &amp; {otherwise}\end{aligned}\right. \\a &amp; = -0.5 \ or \ -0.75\end{align}\]</span> Let <span class="math inline">\(0&lt;x&lt;1\)</span>,therefore <span class="math inline">\(1&lt;x+1&lt;2\)</span>, <spanclass="math inline">\(-1&lt;x-1&lt;0\)</span>, <spanclass="math inline">\(-2&lt;x-2&lt;-1\)</span>, then we substitute tothe 4 conditions to <span class="math inline">\(W(x)\)</span>, we couldget corresponding equations. Substitute to the <spanclass="math inline">\(x_1\to x_4\)</span>, and <spanclass="math inline">\(y_1\to y_4\)</span> we get two 1 x 4 vectors <spanclass="math inline">\(\{w_x, w_y\}\)</span>. The final result could be:<span class="math display">\[\begin{align}f(x,y)=\begin{pmatrix}w_{x1} &amp; w_{x2} &amp; w_{x3} &amp; w_{x4}\end{pmatrix}\begin{pmatrix}Q_{11} &amp; Q_{12} &amp; Q_{13} &amp; Q_{14} \\Q_{21} &amp; Q_{22} &amp; Q_{23} &amp; Q_{24} \\Q_{31} &amp; Q_{32} &amp; Q_{33} &amp; Q_{34} \\Q_{41} &amp; Q_{42} &amp; Q_{43} &amp; Q_{44} \\\end{pmatrix}\begin{pmatrix}w_{y1} \\ w_{y2} \\ w_{y3} \\ w_{y4}\end{pmatrix}\end{align}\]</span> Because of time limit, I am still debugging this algorithm...,therefore I use <code>scipy</code> to accomplish it.</p><h4 id="pseudo-code-2">Pseudo Code</h4><p>I implement this by using <code>scipy</code>, according to thereference.<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><spanclass="hint--top hint--rounded" aria-label="scipy.interpolate.interp2d.https://bbs.huaweicloud.com/blogs/329665.">[2]</span></a></sup></p><h2 id="analysis">Analysis</h2><p>Here I import some 3rd-party libraries permitted by teacher, and the<code>xxx_11910206</code> files are solutions of this homework:</p><ol type="1"><li><code>cv2</code>: the python-OpenCV package, used for reading imagesand comparison</li><li><code>numpy</code>: high efficiency calculating tool, written byC/C++ (using CPU)</li><li><code>matplotlib</code>: built-in image processing package, used forshowing visualization of results</li><li><code>xxx_11910206</code>: self implemented algorithms</li><li><code>scipy</code>: contains many scientific math algorithms, likeinterpolation</li></ol><p>I use two other <code>ndarray test</code> and <code>ndarraytest_3</code> for testing my algorithms, the reasons are listed below.Then I set <code>np.random.seed(0)</code> in order to control the resultof random generated tests. The "seed" would help to make the results ofmy <code>ipynb</code> file repeatable:</p><ol type="1"><li>The size of the given image is a square, but my codes supportrectangular input, therefore I would like to use a new test for showingthe generalization capability. Besides, I want to show that myalgorithms can handle RGB images as well.</li><li>The pixel image could better depict the difference of differentalgorithms, it could be helpful for analyzing. The change invisualization is much more obvious. However, I will still use the givenfigure for time complexity testing.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-keyword">from</span> nearest_11910206 <span class="hljs-keyword">import</span> nearest_11910206<br><span class="hljs-keyword">from</span> bilinear_11910206 <span class="hljs-keyword">import</span> bilinear_11910206<br><span class="hljs-keyword">from</span> bicubic_11910206 <span class="hljs-keyword">import</span> bicubic_11910206<br><br>%matplotlib inline<br><br>np.random.seed(<span class="hljs-number">0</span>)  <span class="hljs-comment"># repeatable</span><br>test = np.uint8(np.random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, size=(<span class="hljs-number">5</span>, <span class="hljs-number">7</span>)))<br>test_3 = np.uint8(np.random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,size=(<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>)))<br>raw_gray = cv2.cvtColor(cv2.imread(<span class="hljs-string">&#x27;rice.tif&#x27;</span>), cv2.COLOR_BGR2GRAY)<br></code></pre></td></tr></table></figure><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/DIP/interpolation_11910206_3_0.png" alt="png"  /></center><p>​</p><h3 id="brief-results">Brief Results</h3><p>Here is all the results that required of this homework.</p><p><strong>Nearest Neighbor Interpolation</strong>: According toanalysis and the efficiency test in the last part, this is the fastestalgorithms. The pay-off is that it would occur discontinuity and obviousserration.</p><p><strong>Bilinear Interpolation</strong>: It is more complex thanNearest Neighbor, but it do not have serration for the result grayimage. Basically, the result is smooth and continuous, but this methodwould filter some high-frequency component, thus the image might be alittle faintness.</p><p><strong>Bicubic Interpolation</strong>: The time complexity is thegreatest, but the interpolation effect is the best. It is important tochoose a proper weight policy, exactly choosing an appropriate kernel.The kernel value is usually set to -0.5 or -0.75 (OpenCV set as-0.75).</p><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/DIP/interpolation_11910206_6_0.png" alt="png" style="zoom:80%;" /></center><h3 id="nearest-neighbor-interpolation-1">Nearest NeighborInterpolation</h3><p>Comparing the result of OpenCV with self-implemented, they are thesame when enlarging. Besides, the result shows that I can applydifferent resized factors in x and y axes.</p><p>During enlarging the figure, nearest neighbor algorithm cannotinterpolate smoothly among the original pixels, the boundaries of colorblocks is significantly clear.</p><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/DIP/interpolation_11910206_8_0.png" alt="png"  /></center><p>The results of OpenCV and self-implemented algorithms differ whenoperating shrunk, I look through the code of OpenCV and find that ituses <code>cvFloor</code> , which cutoff the integer part of a floatnumber while I use <code>round</code> to get the neighbors, thus thedown-sample result of OpenCV would lean to the left and top sides whilemine is center aligned. The comparison of pixel values are also providedbelow:</p><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/DIP/interpolation_11910206_9_0.png" alt="png"  /></center><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Raw:</span><br> [[<span class="hljs-number">172</span>  <span class="hljs-number">47</span> <span class="hljs-number">117</span> <span class="hljs-number">192</span>  <span class="hljs-number">67</span> <span class="hljs-number">251</span> <span class="hljs-number">195</span>]<br> [<span class="hljs-number">103</span>   <span class="hljs-number">9</span> <span class="hljs-number">211</span>  <span class="hljs-number">21</span> <span class="hljs-number">242</span>  <span class="hljs-number">36</span>  <span class="hljs-number">87</span>]<br> [ <span class="hljs-number">70</span> <span class="hljs-number">216</span>  <span class="hljs-number">88</span> <span class="hljs-number">140</span>  <span class="hljs-number">58</span> <span class="hljs-number">193</span> <span class="hljs-number">230</span>]<br> [ <span class="hljs-number">39</span>  <span class="hljs-number">87</span> <span class="hljs-number">174</span>  <span class="hljs-number">88</span>  <span class="hljs-number">81</span> <span class="hljs-number">165</span>  <span class="hljs-number">25</span>]<br> [ <span class="hljs-number">77</span>  <span class="hljs-number">72</span>   <span class="hljs-number">9</span> <span class="hljs-number">148</span> <span class="hljs-number">115</span> <span class="hljs-number">208</span> <span class="hljs-number">243</span>]]<br><span class="hljs-attr">OpenCV:</span><br> [[<span class="hljs-number">172</span> <span class="hljs-number">117</span>  <span class="hljs-number">67</span>]<br> [ <span class="hljs-number">70</span>  <span class="hljs-number">88</span>  <span class="hljs-number">58</span>]]<br><span class="hljs-attr">Mine:</span><br> [[  <span class="hljs-number">9</span>  <span class="hljs-number">21</span>  <span class="hljs-number">36</span>]<br> [ <span class="hljs-number">87</span>  <span class="hljs-number">88</span> <span class="hljs-number">165</span>]]<br></code></pre></td></tr></table></figure><p>I extend my codes for RGB images, actually, this is nearly the sameas operating gray images, what's new is to do interpolation separatelyin 3 color channels. I use the following code to judge what shape ofarray should be returned: <code>interpolated = np.zeros(dim, dtype=int)if input_raw.ndim == 2 else np.zeros((dim[0], dim[1], 3),dtype=int)</code>. When updating the returned array<code>interpolated</code>, use the convenient numpy operator<code>:</code> (numpy is much more efficient than raw python codes), theRGB channels could be calculated within one line of code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> input_raw.ndim == <span class="hljs-number">2</span>:<br>    interpolated[i, j] = input_raw[r_idx, c_idx] <span class="hljs-comment"># calculate gray figure</span><br><span class="hljs-keyword">else</span>:<br>    interpolated[i, j, :] = input_raw[r_idx, c_idx, :] <span class="hljs-comment"># calculate RGB figure</span><br></code></pre></td></tr></table></figure><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/DIP/interpolation_11910206_11_0.png" alt="png"  /></center><h3 id="bilinear-interpolation-1">Bilinear Interpolation</h3><p>Below is to sample the "Random Raw" to 100 x 100, the result issimilar with OpenCV. The figure with title "Self-linear2" uses repeatedlinear interpolation, and the one with "Self-polyfit" uses polynomialfit.</p><p>It also supports RGB figures just like <code>nearest_11910206</code>does. From the results, we could see that bilinear interpolation hasbetter effect than nearest neighbor, it could compensate sometransitional values between the original color blocks.</p><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/DIP/interpolation_11910206_13_0.png" alt="png"  /></center><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/DIP/interpolation_11910206_14_0.png" alt="png" style="zoom:100%;" /></center><p>From the figure above with title "Inverse-Shrunk", it is down-sampledback to 5 x 5 from the image up-sampled to 100 x 100. It reveal that thebilinear process dramatically could be inverse! From wiki, I get thefollowing proof for Inverse computation under special condition (if thepoint is inside any convex quadrilateral, which means 4-border-polygonsthat are convex, the "unit square coordinates" could befound).<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded" aria-label="Bilinear_interpolation.https://en.wikipedia.org/wiki/Bilinear_interpolation.">[1]</span></a></sup></p><p>The <span class="math inline">\(\{a, b, c, d\}\)</span> could be seenas weights of current interpolation, the unit square are parameterizedby <span class="math inline">\(\{\lambda,\mu\}\in[0, 1]\)</span> . Thetarget is to solve these two parameters. <span class="math display">\[\begin{align}&amp; a + b\lambda+c\mu+d\lambda\mu=0 \\\\&amp; a = x_{00} - x \\&amp; b = x_{10} - x_{00} \\&amp; c = x_{01} - x_{00} \\&amp; d = x_{11} - x_{01} - x_{10} + x_{00} \\\end{align}\]</span> Take 2-d cross product of the system, reveals that: <spanclass="math display">\[\begin{align}&amp; (a+b\lambda+c\mu)\times d &amp; = 0 \\&amp; (a+b\lambda)\times (c+d\mu) &amp; = 0 \\&amp; (a+c\mu)\times (b+d\mu) &amp; = 0 \\&amp; \Rightarrow \\&amp; C+E\lambda+F\mu &amp; = 0 \\&amp; B+(C+D)\lambda +E\lambda^2 &amp; = 0 \\&amp; A+(C-D)\mu+F\mu^2 &amp; = 0 \\\\&amp; with \\&amp; A=a\times b \quad B=a\times c \quad C=a\times d \\&amp; D=b\times c \quad E=b\times d \quad F=c\times d\end{align}\]</span> Use quadratic formula to solve the equations, we get: <spanclass="math display">\[\mathbb{D}=(C+D)^2-4EB=(C-D)^2-4FA \\\Rightarrow \quad \lambda=\frac{-C-D\pm \sqrt{\mathbb{D}}}{2E} \quad\mu=\frac{-C+D\pm \sqrt{\mathbb{D}}}{2F}\]</span> This might explain the dramatic inverse property I found,actually I not sure I totally understand it...</p><h3 id="time-complexity-analysis">Time Complexity Analysis</h3><h4 id="enlarge">Enlarge</h4><p>I use the built-in <code>time</code> package in python to recordrunning time in float seconds, and then use <code>matplotlib</code> toplot them, here shows the results. The time complexity of bilinearinterpolation and nearest neighbor interpolation are both <spanclass="math inline">\(O(N^2)\)</span>, due to the embedded two forloops. Apparently, bilinear cost more time than nearest neighbor,because it does more calculation in the for loops, which also means thatbilinear interpolation has larger coefficient for the 2nd-orderterm.</p><p>Compare the two bilinear methods, it turns out that when interpolatedsize is under 800 they hardly have difference. Therefore, it isreasonable to guess that using repeated linear interpolation andpolynomial fitting occupy similar calculation.</p><p>OpenCV test is weird, I guess it might have down differentoptimization strategies for these 3 methods. By the way, wheninterpolated size is larger than 3000, the time cost of nearest neighbormethod would increase horribly.</p><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/DIP/buffer_time_result_2.png" alt="png" style="zoom:100%;" /></center><h4 id="shrunk">Shrunk</h4><p>The shrunk result is similar with enlarge, a interesting fact is thatshrunk cost much less time than enlarge. This means that the limitationand challenge of interpolation problem is up-sample rather thandown-sample. For example, recovering image and super-resolution taskmight be relevant to this, I guess.</p><p>The OpenCV result is still strange, might relate to its bottomoptimization or it use other methods instead.</p><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/DIP/buffer_time_result_3.png" alt="png" style="zoom:100%;" /></center><h2 id="reference">Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>Bilinear_interpolation.https://en.wikipedia.org/wiki/Bilinear_interpolation.<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>scipy.interpolate.interp2d.https://bbs.huaweicloud.com/blogs/329665.<a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>Cubic convolutioninterpolation for digital image processing<a href="#fnref:3" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>课程相关</category>
      
      <category>DIP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图像插值</tag>
      
      <tag>DIP</tag>
      
      <tag>NumPy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>讨论当代大学生日益尖锐的性别对立</title>
    <link href="/2022/02/20/2022-2-20-Origin-and-Develop-of-Male-Gaze/"/>
    <url>/2022/02/20/2022-2-20-Origin-and-Develop-of-Male-Gaze/</url>
    
    <content type="html"><![CDATA[<h2 id="概述与起因">概述与起因</h2><p>  这是个非常敏感的话题，我一直以来虽然身处其中但并不对此发表言论。不过最近看到一些相关的东西然后去了解了这方面的知识，并且考虑到这个博客应该没什么人看，就写这篇博客记录一下我自己的观察思考。</p><p>  首先起因要从新番《更衣人偶坠入爱河》说起，这是一部罕见的关于Cosplay题材的番剧，制作从目前看来也是很不错的。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="“「その着せ替え人形は恋をする」放送は1月！アニメ映像初出しのPV公開、キャストも”.https://natalie.mu/comic/news/450709">[1]</span></a></sup>本来这是一个普及cos文化的很棒的机会，不过微博和网络上对此争议却意外的大（我自己手机里是不下载微博的，这是从群里看到的）。我随便选点相关反方言论<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="“被扣上“男权凝视”帽子的《更衣人偶》，折射出二次元的尴尬现状”.https://zhuanlan.zhihu.com/p/459764846">[4]</span></a></sup>：</p><blockquote><ol type="1"><li>狗肉下面刷残忍，川菜下面刷太辣，海鲜下面刷痛风，宠物下面刷好吃，二次元下面刷媚宅<br></li><li>还有女生夏天穿很短的短裤，穿露骨的衣服，那也是迎合男性了？为什么我看到有种说法管这些叫穿衣自由？</li><li>笑了，做给宅男看的不媚宅媚谁？也没人天天逮着偶像剧说媚女啊[大笑]，怎么意见这么多呢</li></ol></blockquote><p>  没找到正方言论的原因是因为我不用微博（女权阵地），我个人到是觉得这个问题没有讨论的价值，就像部分反方言论说的：“讨论男性向番剧的媚宅问题没有价值”。而且这个番剧原作的漫画也是有很多女性观众群体的（因为也有爱好cos题材的女性观众，并且内容本身也是适合女性观看）<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="“今一番面白い漫画はこれ！「全国書店員が選んだおすすめコミック2020」ランキング発表”.https://web.archive.org/web/20200131141434/https://hon-hikidashi.jp/enjoy/100863/">[2]</span></a></sup>，如下图1。但是另一方面，确实我们也要承认不论有没有女性观众，这个番剧确实是很多男性凝视的视角<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="“【試し読み】「住む世界が違う」2人を繋ぐ好きなもの『その着せ替え人形は恋をする』第1話【前半】”.https://web.archive.org/web/20200217112227/https://hon-hikidashi.jp/enjoy/99008/">[3]</span></a></sup>，而且作者还是女性。</p><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/others/20220220210953.png" width="400"><center>图 1</center></center><p>  虽然这个话题的讨论没什么意思，但这件事本身的讨论是有意义的。本着探求态度我试图去了解并解释：为什么很多影视作品存在男性凝视？为什么当代性别矛盾激化？这究竟是男性的错还是女权主义者的错？</p><h2 id="了解与思考">了解与思考</h2><blockquote><p>  特洛伊国王和海伦的故事，海伦就是被凝视的那种人，各种英雄救美的电影小说也是一样的，‘女性的存在价值就是为了男性服务的’；那些小说，战争和电影，都浓墨重彩地去叙述英雄的故事，描写英雄的力量，英雄的历险，女性就是这些英雄的战利品，最后英雄把女性顺理成章地救走，女性也顺理成章的委身于他。</p></blockquote><p>  上面是我一个“哲学大师”同学的解释，另外想了解什么是“凝视”，也可以参考这个链接：<ahref="https://zhuanlan.zhihu.com/p/267116286">男性凝视：给女性的自我表达缠一个死结？</a>。除此之外，体育运动中很多女性的服装上也能看到男性凝视的影子。在b站上找到了一个韩国作家对“男性凝视和逆向歧视”的讨论，播放量还是很高的。他的观点我是认同的，但是我觉得更多是解释和无奈，他并没有提出相应的解决策略，而是用“代价”的概念希望男性更好的去理解逆向歧视的原因。他的结论如果我没理解错的话，能够总结为如下几点：</p><ol type="1"><li>承认男性凝视是普遍存在的，并且男性享有更高的社会经济地位；</li><li>男性对女性的歧视来源于认为女性能力不足，无法承担更高的责任义务；</li><li>当下部分女性歧视男性可以理解为男性歧视女性而支付的代价；</li><li>父权社会本身对部分男性也是不公平的，竞争压力和责任义务大；</li><li>多数男性的观点是用社会和经济地位作为代价，支付女性的美貌；</li><li>逆向歧视更合适的词汇是“歧视的代价”；</li><li>最后，这种歧视和性别矛盾很难短时间内消失；</li></ol>    <div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">        <iframe src="//player.bilibili.com/player.html?aid=98673985&bvid=BV1m7411m7GC&cid=168454692&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;" ></iframe>    </div><p>  我自己思考并总结了一下，把我的思路做了一张图（如下图2）：</p><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/others/male_gaze_self_figure.jpeg" width="650"><center>图 2</center></center><p>  我自己思考的结论和上面的视频略有出入，或者说是他没有讨论到的：</p><ol type="1"><li>首先第一点，<strong>我认为女性的社会地位是在提高的，这是一个不可逆转的趋势</strong>。在古代与近代社会，劳动更多以体力为主，所以男性的地位很高（上古时期母系社会的时候女性是生育的主体，所以社会地位更高）。但是当代社会有两个重要的趋势，一是体力劳动在减少，脑力劳动在增加（我的专业就是机器人，未来要解放双手hhh）。虽然女性由于生育的原因可能在很多职位竞争的时候比不过男性，但是两性在生产能力上的差距确实在逐渐减小。事实是，现在确实有很多优秀的女性在一些相对性别中立的行业中崭露头角。</li><li>以第一点为基础，女性的地位提高，同时女性的消费能力也增强了。<strong>因此，女性凝视趋势的作品现在也是越来越多的，最典型的就是饭圈和偶像，另外在二次元中也有很多女性向的作品</strong>。我认为很多当下两性的矛盾激化就是集中在这里：女性观点是“男性享有更多社会资源，同时社会中存在大量男性凝视的产物，这是性别歧视与对女性的不公平”；男性观点是“女性消耗了很多男性生产的资源，但是自己的生产能力却不匹配消费能力，同时居然还逆向歧视男性”。</li></ol><h2 id="结论与方案">结论与方案</h2><p>  我觉得最重要的一点是不论男性还是女性，都需要进行独立思考，而不是跟随网络上的风向发言。下面是我自己思考，得出认为有助于缓和性别对立的一些想法：</p><ol type="1"><li>容易引起性别对立的侮辱性词汇要避免使用。例如“普信男”，“绿茶”，“裱”等等，有的时候由于没有人发声制止（“沉默的螺旋”），这些歧视性的词汇变成了大家习以为常的用词，甚至变成了幽默的段子；</li><li>普及平等的观念，老一代的观念始终是男尊女卑的，特别是在中国一些乡村县里这样的观念更甚。因此，需要通过教育和知识普及让男女平等的观念被新一代所接受，并籍此在未来希望能缓和性别矛盾；</li><li>接受现状，并努力提升女性能力和地位。我个人认为目前个别女权主义者行为是很过激的，在社交媒体上的发言容易引起性别对立与反感，这不是合理的方式（例如这次对新番的讨论）。首先我觉得不论男性还是女性，都要在接受“现状并不容易改变，不是简单的发言和争论就能解决问题”这个基础上去行动。不论男性凝视还是女性凝视都是资本迎合大众趣味的产物，如果在自己的圈子内自娱自乐，并不值得苛责。“凝视”是我们生来就要接受的，比如父母长辈的凝视（尽管有时会带来反感）。<strong>性别对立和相互歧视不是文化问题，更多是社会结构导致的社会问题，改变现状需要双方努力去优化不合理的社会结构，例如去提高女性的社会经济地位</strong>。</li></ol><h2 id="参考">参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1"class="footnote-text"><span>“「その着せ替え人形は恋をする」放送は1月！アニメ映像初出しのPV公開、キャストも”.https://natalie.mu/comic/news/450709<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2"class="footnote-text"><span>“今一番面白い漫画はこれ！「全国書店員が選んだおすすめコミック2020」ランキング発表”.https://web.archive.org/web/20200131141434/https://hon-hikidashi.jp/enjoy/100863/<a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:3"class="footnote-text"><span>“【試し読み】「住む世界が違う」2人を繋ぐ好きなもの『その着せ替え人形は恋をする』第1話【前半】”.https://web.archive.org/web/20200217112227/https://hon-hikidashi.jp/enjoy/99008/<a href="#fnref:3" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:4"class="footnote-text"><span>“被扣上“男权凝视”帽子的《更衣人偶》，折射出二次元的尴尬现状”.https://zhuanlan.zhihu.com/p/459764846<a href="#fnref:4" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>历史社会</category>
      
    </categories>
    
    
    <tags>
      
      <tag>番剧</tag>
      
      <tag>逆向歧视</tag>
      
      <tag>男性凝视</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python numpy and matplotlib</title>
    <link href="/2022/02/15/2022-2-15-Python-numpy-and-matplotlib/"/>
    <url>/2022/02/15/2022-2-15-Python-numpy-and-matplotlib/</url>
    
    <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2><p>I adjust this file from the lab tutorial of my DIP course, actually Ihave used python for more than two semesters, this is not the first timefor me to code with python and numpy. So what is the purpose of thisblog? I want to record some details of using <code>numpy</code> and<code>matplotlib</code>, because I sometimes forget some of their usages(like find or remove by index and so on). ~Besides, I would record notesfor <code>pandas</code> as well.~</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br></code></pre></td></tr></table></figure><h2 id="numpy">Numpy</h2><p>I refer extensively to <ahref="https://www.numpy.org.cn/en/user/quickstart.html#prerequisites">thissite</a> for reviewing <code>numpy</code>. The reason why<code>numpy</code> is fast and welcome by programmers is because that ituses pre-compiled effective C code and give a convenient vectorizedinterface for users.</p><h3 id="primary">Primary</h3><ul><li>Some basic concepts and attributes of<code>numpy.ndarray</code></li><li>Create numpy arrays for different dimensions</li><li>print arrays</li></ul><h4 id="what-is-numpy.ndarray">What is <code>numpy.ndarray</code></h4><p>NumPy’s main object is the homogeneous multidimensional array. It isa table of elements(usually numbers), all of the same type, indexed by atuple of non-negative integers. In NumPy dimensions are called axes. Forexample, the coordinates of a point in 3D space [1, 2, 1] has one axis.That axis has 3 elements in it, so we say it has a length of 3. In theexample codes below, the array <code>a</code> has 2 axes. The first axishas a length of 2, the second axis has a length of 3.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.arange(<span class="hljs-number">6</span>).reshape(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><div class="code-wrapper"><pre><code class="hljs">[[0 1 2] [3 4 5]]</code></pre></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ndim&#x27;</span>, a.ndim)  <span class="hljs-comment"># count of dimensions (axes)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;shape&#x27;</span>, a.shape)  <span class="hljs-comment"># a tuple of the length of each axes</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;size&#x27;</span>, a.size)  <span class="hljs-comment"># count of all elements</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;dtype&#x27;</span>, a.dtype)  <span class="hljs-comment"># datatype</span><br></code></pre></td></tr></table></figure><div class="code-wrapper"><pre><code class="hljs">ndim 2shape (2, 3)size 6dtype int64</code></pre></div><h4 id="how-to-create-numpy.ndarray">How to create<code>numpy.ndarray</code></h4><p>They could be created from <em>list, tuple, and built-in usefulfunctions</em>. Besides, user could use <code>np.fromfunction</code> tocustomize an array with a give function. Here are some functionexamples: * array * zeros, ones, empty * zeros_like, ones_like,empty_like * arange, linspace * fromfunction, fromfile *random.random</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]])  <span class="hljs-comment"># from list</span><br>b = np.array([(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>)])  <span class="hljs-comment"># from tuple</span><br>c = np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>)  <span class="hljs-comment"># np.arange(start, stop, step)</span><br>d = np.zeros((<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))  <span class="hljs-comment"># create an array of zeros, similar with `c = np.ones((2, 3))`</span><br>e = np.zeros_like(<br>    a)  <span class="hljs-comment"># create an array of zeros with the same shape and type as a given array, similar with `c = np.ones_like((2, 3))`</span><br><span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></table></figure><div class="code-wrapper"><pre><code class="hljs">[[0 0 0] [0 0 0]]</code></pre></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f1</span>(<span class="hljs-params">arg_x, arg_y</span>):</span>  <span class="hljs-comment"># user customized function</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">10</span> * arg_x + arg_y<br><br><br>f = np.fromfunction(f1, (<span class="hljs-number">5</span>, <span class="hljs-number">4</span>), dtype=<span class="hljs-built_in">int</span>)<br>f<br></code></pre></td></tr></table></figure><div class="code-wrapper"><pre><code class="hljs">array([[ 0,  1,  2,  3],       [10, 11, 12, 13],       [20, 21, 22, 23],       [30, 31, 32, 33],       [40, 41, 42, 43]])</code></pre></div><h4 id="print-arrays">Print arrays</h4><ul><li>Except for the last axis(printed from left to right), the otherdimensions are all printed from top to down.</li><li>Use <code>set_printoptions</code> could change the settings of<code>print()</code></li><li>Basic operations and universal functions</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># import sys</span><br><span class="hljs-comment"># np.set_printoptions(threshold=sys.maxsize) # is used to print whole arrays (avoid hiding)</span><br>a = np.arange(<span class="hljs-number">24</span>).reshape((<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(np.arange(<span class="hljs-number">10000</span>).reshape(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>))  <span class="hljs-comment"># print large matrix</span><br>a[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]  <span class="hljs-comment"># visit the last element</span><br></code></pre></td></tr></table></figure><div class="code-wrapper"><pre><code class="hljs">[[[ 0  1  2  3]  [ 4  5  6  7]  [ 8  9 10 11]] [[12 13 14 15]  [16 17 18 19]  [20 21 22 23]]][[   0    1    2 ...   97   98   99] [ 100  101  102 ...  197  198  199] [ 200  201  202 ...  297  298  299] ... [9700 9701 9702 ... 9797 9798 9799] [9800 9801 9802 ... 9897 9898 9899] [9900 9901 9902 ... 9997 9998 9999]]23</code></pre></div><h4 id="operators-and-functions">Operators and functions</h4><ul><li>Support <code>+</code>, <code>-</code>, <code>*</code>,<code>**</code>, <code>+=</code>, <code>*=</code>, and so on, theseoperators all apply on corresponding single elements.</li><li>Note that <code>==</code>, <code>&lt;</code>, and <code>&gt;=</code>also work, it would return an array of bools.</li><li>Dot product is <code>@</code> or <code>arr1.dot(arr2)</code>,multiplication by elements is <code>*</code>.</li><li>Operating with arrays of different types corresponds toupcasting.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.arange(<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(np.sin(a) ** <span class="hljs-number">0.1</span>)  <span class="hljs-comment"># basic operators</span><br><span class="hljs-built_in">print</span>(a == <span class="hljs-number">2</span>)  <span class="hljs-comment"># return bools</span><br>a.resize(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)  <span class="hljs-comment"># reshape() return a new array, resize() adjust the original array</span><br><span class="hljs-built_in">print</span>(a @ a)  <span class="hljs-comment"># dot product</span><br><span class="hljs-built_in">print</span>(a * a)  <span class="hljs-comment"># element multiply</span><br>b = a + <span class="hljs-number">0.1</span> * np.ones(<span class="hljs-number">4</span>).reshape((<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)) * <span class="hljs-number">1j</span><br><span class="hljs-built_in">print</span>(b.dtype)  <span class="hljs-comment"># upcasting to &#x27;float64&#x27;</span><br></code></pre></td></tr></table></figure><div class="code-wrapper"><pre><code class="hljs">[0.         0.98288773 0.99053676 0.82216476][False False  True False][[ 2  3] [ 6 11]][[0 1] [4 9]]complex128</code></pre></div><p><strong>Some <code>ufunc</code></strong>: * There are many universalfunctions, like <code>sin</code>, <code>cos</code>, <code>exp</code>,they all apply to <code>ndarray</code> by elements. * The universalfunctions <code>ufunc</code> could apply on certain axes when specifythem. * There are many <ahref="https://numpy.org/devdocs/reference/routines.logic.html">logicfunctions</a>, like some <code>isxxx</code>functions(<code>isinf</code>, <code>isnan</code>, and so on),<code>all</code> and <code>any</code> are also logic functions. *<code>apply_along_axis</code> might be a useful function (?) <ahref="https://numpy.org/devdocs/reference/generated/numpy.apply_along_axis.html#numpy.apply_along_axis">referto this</a> * <code>argmax</code>, <code>argsort</code> is very useful!<ahref="https://numpy.org/devdocs/reference/generated/numpy.argsort.html#numpy.argsort">referto this</a> * Some other <code>ufunc</code> are listed below in thefigure</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">c = np.arange(<span class="hljs-number">12</span>).reshape(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(c.<span class="hljs-built_in">max</span>(axis=<span class="hljs-number">1</span>))  <span class="hljs-comment"># max of each row</span><br><span class="hljs-built_in">print</span>(c.<span class="hljs-built_in">sum</span>(axis=<span class="hljs-number">0</span>))  <span class="hljs-comment"># sum of each column</span><br><span class="hljs-built_in">print</span>(c.cumsum(axis=<span class="hljs-number">0</span>))  <span class="hljs-comment"># cumulative sum along each column</span><br><span class="hljs-built_in">print</span>(np.<span class="hljs-built_in">all</span>(np.array([-<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]) == np.array([<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])))  <span class="hljs-comment"># logic function `all`</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f2</span>(<span class="hljs-params">arr_arg</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;Average first and last element of a 1-D array&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> (arr_arg[<span class="hljs-number">0</span>] + arr_arg[-<span class="hljs-number">1</span>]) * <span class="hljs-number">0.5</span><br><br><br>d = np.array([[<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]])<br><span class="hljs-built_in">print</span>(d)<br><span class="hljs-built_in">print</span>(np.apply_along_axis(f2, <span class="hljs-number">0</span>, d))  <span class="hljs-comment"># apply along column</span><br><span class="hljs-built_in">print</span>(np.argsort(d, axis=<span class="hljs-number">0</span>))  <span class="hljs-comment"># return the argument of sorted array along columns</span><br></code></pre></td></tr></table></figure><div class="code-wrapper"><pre><code class="hljs">[ 3  7 11][12 15 18 21][[ 0  1  2  3] [ 4  6  8 10] [12 15 18 21]]False[[7 8 9] [1 2 3] [4 5 6]][5.5 6.5 7.5][[1 1 1] [2 2 2] [0 0 0]]</code></pre></div><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/others/20220216231312.png" width="700"></center><h4 id="indexing-and-slicing">Indexing and Slicing</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.arange(<span class="hljs-number">20</span>).reshape(<span class="hljs-number">5</span>, <span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># original</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>])  <span class="hljs-comment"># indexing, the sequence of start from axis 0</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>])  <span class="hljs-comment"># slicing, missing indices are considered complete slices</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>, -<span class="hljs-number">1</span>])  <span class="hljs-comment"># -1 correspond to the last elements</span><br><span class="hljs-built_in">print</span>(a[-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>:<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>])  <span class="hljs-comment"># the magic form from Dr. Zhang, hahaha~</span><br><span class="hljs-built_in">print</span>(a[..., <span class="hljs-number">0</span>])  <span class="hljs-comment"># &#x27;...&#x27; is an alternative for multiple &#x27;:&#x27;</span><br>a[:<span class="hljs-number">4</span>:<span class="hljs-number">2</span>] = -<span class="hljs-number">1</span>  <span class="hljs-comment"># equivalent to a[0:6:2] = -1; from start to position 4, exclusive, set every 2nd element to -1</span><br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><div class="code-wrapper"><pre><code class="hljs">[[ 0  1  2  3] [ 4  5  6  7] [ 8  9 10 11] [12 13 14 15] [16 17 18 19]]4[[ 4  5  6  7] [ 8  9 10 11]][ 7 11][19 18 17][ 0  4  8 12 16][[-1 -1 -1 -1] [ 4  5  6  7] [-1 -1 -1 -1] [12 13 14 15] [16 17 18 19]]</code></pre></div><h3 id="advanced">Advanced</h3><h4 id="change-the-shape-of-arrays">Change the shape of arrays</h4><ul><li><code>a.ravel()</code> return the flattened array, but not changethe array itself</li><li><code>a.reshape()</code> return the reshaped array,<code>a.resize()</code> change the shape of array</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.floor(<span class="hljs-number">10</span> * np.random.random((<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)))  <span class="hljs-comment"># similar with `np.ceil`</span><br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># range from [0, 10)</span><br><span class="hljs-built_in">print</span>(a.ravel())  <span class="hljs-comment"># return the flattened array</span><br><span class="hljs-built_in">print</span>(a.reshape(<span class="hljs-number">2</span>, <span class="hljs-number">6</span>))  <span class="hljs-comment"># return the array with modified shape</span><br><span class="hljs-built_in">print</span>(a.T.shape)  <span class="hljs-comment"># return the transposed array(shape)</span><br></code></pre></td></tr></table></figure><div class="code-wrapper"><pre><code class="hljs">[[0. 4. 8. 8.] [9. 3. 3. 5.] [0. 2. 5. 5.]][0. 4. 8. 8. 9. 3. 3. 5. 0. 2. 5. 5.][[0. 4. 8. 8. 9. 3.] [3. 5. 0. 2. 5. 5.]](4, 3)</code></pre></div><h4 id="stacking-arrays-together">Stacking arrays together</h4><p>Refer to the tutorial <ahref="https://www.numpy.org.cn/user/quickstart.html#%E5%B0%86%E4%B8%8D%E5%90%8C%E6%95%B0%E7%BB%84%E5%A0%86%E5%8F%A0%E5%9C%A8%E4%B8%80%E8%B5%B7">here</a>,besides some concatenate and splitting functions are <ahref="https://numpy.org/devdocs/reference/generated/numpy.concatenate.html#numpy.concatenate">here</a>.* <code>vstack</code> vertical appending * <code>hstack</code>horizontal appending * <code>column_stack</code> and<code>concatenate</code>also are useful * <code>np.c_</code> translatesslice objects to concatenation along the second axis, this is short-handfor <code>np.r_['-1,2,0', index expression]</code>, more about<code>np.r_</code> is <ahref="https://numpy.org/devdocs/reference/generated/numpy.r_.html#numpy.r_">here</a>.The dimension upgrade rule of <code>np.r_</code> can refer to <ahref="https://blog.csdn.net/huhu0769/article/details/52742395">here</a>.* <code>hsplit</code> and <code>vsplit</code> can split arrays</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.ones((<span class="hljs-number">2</span>, <span class="hljs-number">2</span>))<br>b = np.zeros((<span class="hljs-number">2</span>, <span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(np.vstack((a, b)))  <span class="hljs-comment"># vertical</span><br><span class="hljs-built_in">print</span>(np.hstack((a, b)))  <span class="hljs-comment"># horizontal</span><br><span class="hljs-built_in">print</span>(np.r_[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>:<span class="hljs-number">5j</span>, <span class="hljs-number">0</span>, [<span class="hljs-number">1</span>] * <span class="hljs-number">2</span>, np.array([<span class="hljs-number">2</span>,<br>                                          <span class="hljs-number">3</span>])])  <span class="hljs-comment"># 5j means using np.linspace(start, stop, step, endpoint=1), if not an imaginary number, using np.arange(start, stop, step)</span><br><span class="hljs-built_in">print</span>(np.r_[<span class="hljs-string">&#x27;0,3,2&#x27;</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]])  <span class="hljs-comment"># the last two integers &#x27;3, 1&#x27; are about dimension upgrading</span><br></code></pre></td></tr></table></figure><div class="code-wrapper"><pre><code class="hljs">[[1. 1.] [1. 1.] [0. 0.] [0. 0.]][[1. 1. 0. 0.] [1. 1. 0. 0.]][2.   2.75 3.5  4.25 5.   0.   1.   1.   2.   3.  ][[[1 2 3]] [[4 5 6]]]</code></pre></div><h4 id="copies-and-views">Copies and Views</h4><p>When operating and calculating arrays, sometimes the interpreterwould copy the data into a new array and return it, sometimes not.<strong>Python is an advanced language, therefore usually it operates byreference, not by value(can be checked by <code>id()</code>)</strong>.There are 3 methods of operating <code>ndarray</code>, which are<code>=</code>, <code>view</code> and <code>copy</code>.</p><h5 id="no-copy-at-all">No Copy at All</h5><p><strong>Pass by reference, actually is another name of the originalarray</strong>. This is useful when passing by function parameters, butpython interpreter helps us do this, usually we do not do this.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;No Copy at All&quot;&quot;&quot;</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f3</span>(<span class="hljs-params">arg_arr</span>):</span>  <span class="hljs-comment"># pass by reference</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">id</span>(arg_arr)<br><br><br>a = np.arange(<span class="hljs-number">4</span>)<br>b = a  <span class="hljs-comment"># do assignment &#x27;=&#x27; by reference(just different names)</span><br>b.shape = <span class="hljs-number">2</span>, <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a) == f3(a))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a) == <span class="hljs-built_in">id</span>(b))<br></code></pre></td></tr></table></figure><div class="code-wrapper"><pre><code class="hljs">TrueTrue</code></pre></div><h5 id="view-or-shallow-copy">View or Shallow Copy</h5><p><strong>This is like the feature of ROI in CV and matrixoperation</strong>. This is useful when the matrix data do not need tochange when operating. For example, extracting kernel is this kind ofoperation, slicing itself also returns a <em>view</em>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">c = a.view()  <span class="hljs-comment"># `view` create a new array object share the same data</span><br><span class="hljs-built_in">print</span>(c <span class="hljs-keyword">is</span> a)<br><span class="hljs-built_in">print</span>(c.base <span class="hljs-keyword">is</span> a)<br>c.shape = <span class="hljs-number">4</span>, <span class="hljs-number">1</span>  <span class="hljs-comment"># c&#x27;s property could be changed</span><br><span class="hljs-built_in">print</span>(a.shape)  <span class="hljs-comment"># a&#x27;s data do not change</span><br><span class="hljs-built_in">print</span>(c.shape)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a) == <span class="hljs-built_in">id</span>(c))  <span class="hljs-comment"># this is reference, is shallow copy(like ROI)</span><br>a *= <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># a and c both change</span><br><span class="hljs-keyword">del</span> a  <span class="hljs-comment"># this is like the principle of reference count</span><br><span class="hljs-built_in">print</span>(c)  <span class="hljs-comment"># c still work</span><br></code></pre></td></tr></table></figure><div class="code-wrapper"><pre><code class="hljs">FalseTrue(2, 2)(4, 1)False[[0 2] [4 6]][[0] [2] [4] [6]]</code></pre></div><h5 id="deep-copy">Deep Copy</h5><p><strong>This creat a full copy of the original data</strong>.Sometimes copy should be called after slicing if the original array isnot required anymore. For example, suppose a is a huge intermediateresult and the final result b only contains a small fraction of a, adeep copy should be made when constructing b with slicing.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">d = c.copy()  <span class="hljs-comment"># a new array object with new data is created</span><br><span class="hljs-built_in">print</span>(d.base <span class="hljs-keyword">is</span> c)  <span class="hljs-comment"># d doesn&#x27;t share anything with a</span><br><br>a = np.arange(<span class="hljs-built_in">int</span>(<span class="hljs-number">1e8</span>))  <span class="hljs-comment"># very large array</span><br>b = a[:<span class="hljs-number">100</span>].copy()  <span class="hljs-comment"># create a copy and delete</span><br><span class="hljs-keyword">del</span> a  <span class="hljs-comment"># the memory of ``a`` can be released.</span><br></code></pre></td></tr></table></figure><div class="code-wrapper"><pre><code class="hljs">False</code></pre></div><h4 id="common-function-api">Common Function API</h4><p>refer to <ahref="https://www.numpy.org.cn/reference/routines/">here</a></p><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/others/20220218211635.png" width="700"></center><h4 id="broadcasting">Broadcasting</h4><p>refer to <ahref="https://www.numpy.org.cn/user/basics/broadcasting.html#%E4%B8%80%E8%88%AC%E5%B9%BF%E6%92%AD%E8%A7%84%E5%88%99">here</a>,below is one example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.array([<span class="hljs-number">0.0</span>, <span class="hljs-number">10.0</span>, <span class="hljs-number">20.0</span>, <span class="hljs-number">30.0</span>])<br>b = np.array([<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.0</span>])<br><span class="hljs-built_in">print</span>(a[:, np.newaxis] + b)  <span class="hljs-comment"># `newaxis` insert a new axis, so a become a 4x1 array</span><br></code></pre></td></tr></table></figure><div class="code-wrapper"><pre><code class="hljs">[[ 1.  2.  3.] [11. 12. 13.] [21. 22. 23.] [31. 32. 33.]]</code></pre></div><h4 id="more-about-indexing">More about indexing</h4><p>refer to <ahref="https://www.numpy.org.cn/user/quickstart.html#%E8%8A%B1%E5%BC%8F%E7%B4%A2%E5%BC%95%E5%92%8C%E7%B4%A2%E5%BC%95%E6%8A%80%E5%B7%A7">here</a></p><h5 id="indexing-with-arrays-of-indices">Indexing with Arrays ofIndices</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.arange(<span class="hljs-number">12</span>).reshape(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(a)<br>i = np.array([[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>],<br>              [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]])  <span class="hljs-comment"># indices for the first dim of a</span><br>j = np.array([[<span class="hljs-number">2</span>, <span class="hljs-number">1</span>],<br>              [<span class="hljs-number">3</span>, <span class="hljs-number">3</span>]])  <span class="hljs-comment"># indices for the second dim</span><br><span class="hljs-built_in">print</span>(a[i,j])<br>l = (i, j) <span class="hljs-comment"># another way is using a tuple for indexing</span><br><span class="hljs-built_in">print</span>(a[l]) <span class="hljs-comment"># result is the same</span><br></code></pre></td></tr></table></figure><div class="code-wrapper"><pre><code class="hljs">[[ 0  1  2  3] [ 4  5  6  7] [ 8  9 10 11]][[ 2  5] [ 7 11]][[ 2  5] [ 7 11]]</code></pre></div><ul><li>Another usage example is about <code>argmax</code>, which is also inthe tutorial.</li><li>Use array indices to allocate data is also a good usage.</li></ul><h5 id="indexing-with-boolean-arrays">Indexing with Boolean Arrays</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.arange(<span class="hljs-number">12</span>).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(a[a &gt; <span class="hljs-number">4</span>]) <span class="hljs-comment"># 1d array with the selected elements</span><br></code></pre></td></tr></table></figure><div class="code-wrapper"><pre><code class="hljs">[ 5  6  7  8  9 10 11]</code></pre></div><h5 id="ix_-function">ix_() function</h5><p>refer to <ahref="https://www.numpy.org.cn/user/quickstart.html#ix-%E5%87%BD%E6%95%B0">here</a>,it is useful when doing some array operation (?)</p><h2 id="matplotlib">Matplotlib</h2><h3 id="magic-in-jupyter">Magic in jupyter</h3><p>I refer to <ahref="https://scipy-lectures.org/intro/matplotlib/index.html">thissite</a> for learning <code>Matplotlib</code>. There are some magic inJupyter Notebook, like <code>%matplotlib inline</code>, to let user workwith <code>matplotlib</code> interactively. Use the below code could setwhich figure formats are enabled(more refer to <ahref="https://ipython.readthedocs.io/en/stable/interactive/magics.html#magic-matplotlib">this</a>):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> IPython.display <span class="hljs-keyword">import</span> set_matplotlib_formats<br>set_matplotlib_formats(<span class="hljs-string">&#x27;pdf&#x27;</span>, <span class="hljs-string">&#x27;svg&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="using-pyplot">Using <code>pyplot</code></h3><p><code>from matplotlib import pyplot as plt</code> or <code>importmatplotlib.pyplot as plt</code> might be the first python code in yourstudy. The majority of plotting commands in <code>pyplot</code> haveMatlab™ analogs with similar arguments. Important commands are explainedwith interactive examples.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-comment"># Create a figure of size 8x6 inches, 80 dots per inch</span><br>plt.figure(figsize=(<span class="hljs-number">8</span>, <span class="hljs-number">6</span>), dpi=<span class="hljs-number">80</span>)<br>    <br><span class="hljs-comment"># Create a new subplot from a grid of 1x1</span><br>plt.subplot(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br><br>X = np.linspace(-np.pi, np.pi, <span class="hljs-number">256</span>)<br>C, S = np.cos(X), np.sin(X)<br><br><span class="hljs-comment"># Plot cosine with a blue continuous line of width 1 (pixels)</span><br>plt.plot(X, C, color=<span class="hljs-string">&quot;blue&quot;</span>, linewidth=<span class="hljs-number">1.0</span>, linestyle=<span class="hljs-string">&quot;-&quot;</span>, label=<span class="hljs-string">&quot;cosine&quot;</span>)<br><br><span class="hljs-comment"># Plot sine with a green continuous line of width 1 (pixels)</span><br>plt.plot(X, S, color=<span class="hljs-string">&quot;green&quot;</span>, linewidth=<span class="hljs-number">1.0</span>, linestyle=<span class="hljs-string">&quot;-&quot;</span>, label=<span class="hljs-string">&quot;sine&quot;</span>)<br><br><span class="hljs-comment"># Set x limits</span><br>plt.xlim(-<span class="hljs-number">4.0</span>, <span class="hljs-number">4.0</span>)<br><br><span class="hljs-comment"># Set x ticks</span><br>plt.xticks(np.linspace(-<span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>))<br><br><span class="hljs-comment"># Set y limits</span><br>plt.ylim(-<span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>)<br><br><span class="hljs-comment"># Set y ticks</span><br>plt.yticks(np.linspace(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>))<br><br><span class="hljs-comment"># Save figure using 72 dots per inch</span><br><span class="hljs-comment"># plt.savefig(&quot;exercise_2.png&quot;, dpi=72)</span><br><br>plt.legend(loc=<span class="hljs-string">&#x27;upper left&#x27;</span>)<br><br><span class="hljs-comment"># Show result on screen</span><br>plt.show()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">ax = plt.gca()  <span class="hljs-comment"># gca stands for &#x27;get current axis&#x27;</span><br>ax.spines[<span class="hljs-string">&#x27;right&#x27;</span>].set_color(<span class="hljs-string">&#x27;none&#x27;</span>)<br>ax.spines[<span class="hljs-string">&#x27;top&#x27;</span>].set_color(<span class="hljs-string">&#x27;none&#x27;</span>)<br>ax.xaxis.set_ticks_position(<span class="hljs-string">&#x27;bottom&#x27;</span>)<br>ax.spines[<span class="hljs-string">&#x27;bottom&#x27;</span>].set_position((<span class="hljs-string">&#x27;data&#x27;</span>,<span class="hljs-number">0</span>))<br>ax.yaxis.set_ticks_position(<span class="hljs-string">&#x27;left&#x27;</span>)<br>ax.spines[<span class="hljs-string">&#x27;left&#x27;</span>].set_position((<span class="hljs-string">&#x27;data&#x27;</span>,<span class="hljs-number">0</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">t = <span class="hljs-number">2</span> * np.pi / <span class="hljs-number">3</span><br>plt.plot([t, t], [<span class="hljs-number">0</span>, np.cos(t)], color=<span class="hljs-string">&#x27;blue&#x27;</span>, linewidth=<span class="hljs-number">2.5</span>, linestyle=<span class="hljs-string">&quot;--&quot;</span>)<br>plt.scatter([t, ], [np.cos(t), ], <span class="hljs-number">50</span>, color=<span class="hljs-string">&#x27;blue&#x27;</span>)<br><br>plt.annotate(<span class="hljs-string">r&#x27;$cos(\frac&#123;2\pi&#125;&#123;3&#125;)=-\frac&#123;1&#125;&#123;2&#125;$&#x27;</span>,<br>             xy=(t, np.cos(t)), xycoords=<span class="hljs-string">&#x27;data&#x27;</span>,<br>             xytext=(-<span class="hljs-number">90</span>, -<span class="hljs-number">50</span>), textcoords=<span class="hljs-string">&#x27;offset points&#x27;</span>, fontsize=<span class="hljs-number">16</span>,<br>             arrowprops=<span class="hljs-built_in">dict</span>(arrowstyle=<span class="hljs-string">&quot;-&gt;&quot;</span>, connectionstyle=<span class="hljs-string">&quot;arc3,rad=.2&quot;</span>))<br><br>plt.plot([t, t],[<span class="hljs-number">0</span>, np.sin(t)], color=<span class="hljs-string">&#x27;red&#x27;</span>, linewidth=<span class="hljs-number">2.5</span>, linestyle=<span class="hljs-string">&quot;--&quot;</span>)<br>plt.scatter([t, ],[np.sin(t), ], <span class="hljs-number">50</span>, color=<span class="hljs-string">&#x27;red&#x27;</span>)<br><br>plt.annotate(<span class="hljs-string">r&#x27;$sin(\frac&#123;2\pi&#125;&#123;3&#125;)=\frac&#123;\sqrt&#123;3&#125;&#125;&#123;2&#125;$&#x27;</span>,<br>             xy=(t, np.sin(t)), xycoords=<span class="hljs-string">&#x27;data&#x27;</span>,<br>             xytext=(+<span class="hljs-number">10</span>, +<span class="hljs-number">30</span>), textcoords=<span class="hljs-string">&#x27;offset points&#x27;</span>, fontsize=<span class="hljs-number">16</span>,<br>             arrowprops=<span class="hljs-built_in">dict</span>(arrowstyle=<span class="hljs-string">&quot;-&gt;&quot;</span>, connectionstyle=<span class="hljs-string">&quot;arc3,rad=.2&quot;</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> label <span class="hljs-keyword">in</span> ax.get_xticklabels() + ax.get_yticklabels():<br>    label.set_fontsize(<span class="hljs-number">16</span>)<br>    label.set_bbox(<span class="hljs-built_in">dict</span>(facecolor=<span class="hljs-string">&#x27;white&#x27;</span>, edgecolor=<span class="hljs-string">&#x27;None&#x27;</span>, alpha=<span class="hljs-number">0.65</span>))<br></code></pre></td></tr></table></figure><table border="0" class="docutils"><colgroup><col width="17%" /><col width="28%" /><col width="54%" /></colgroup><thead valign="bottom"><tr class="row-odd"><th class="head">Argument</th><th class="head">Default</th><th class="head">Description</th></tr></thead><tbody valign="top"><tr class="row-even"><td><code class="docutils literal notranslate"><span class="pre">num</span></code></td><td><code class="docutils literal notranslate"><span class="pre">1</span></code></td><td>number of figure</td></tr><tr class="row-odd"><td><code class="docutils literal notranslate"><span class="pre">figsize</span></code></td><td><code class="docutils literal notranslate"><span class="pre">figure.figsize</span></code></td><td>figure size in inches (width, height)</td></tr><tr class="row-even"><td><code class="docutils literal notranslate"><span class="pre">dpi</span></code></td><td><code class="docutils literal notranslate"><span class="pre">figure.dpi</span></code></td><td>resolution in dots per inch</td></tr><tr class="row-odd"><td><code class="docutils literal notranslate"><span class="pre">facecolor</span></code></td><td><code class="docutils literal notranslate"><span class="pre">figure.facecolor</span></code></td><td>color of the drawing background</td></tr><tr class="row-even"><td><code class="docutils literal notranslate"><span class="pre">edgecolor</span></code></td><td><code class="docutils literal notranslate"><span class="pre">figure.edgecolor</span></code></td><td>color of edge around the drawing background</td></tr><tr class="row-odd"><td><code class="docutils literal notranslate"><span class="pre">frameon</span></code></td><td><code class="docutils literal notranslate"><span class="pre">True</span></code></td><td>draw figure frame or not</td></tr></tbody></table><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/python/sphx_glr_plot_linestyles_001.png" height="250"></div><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/python/20220221145220.png" height="250"></div></div></div>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>课程相关</category>
      
      <category>DIP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DIP</tag>
      
      <tag>NumPy</tag>
      
      <tag>Matplotlib</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Note of Modern Control 2021</title>
    <link href="/2022/02/14/2022-2-14-Note-Of-Modern-Control-2021/"/>
    <url>/2022/02/14/2022-2-14-Note-Of-Modern-Control-2021/</url>
    
    <content type="html"><![CDATA[<h2 id="course">Course</h2><p>  欢迎大家关注我们实验室b站账号，这个课程录像的质量还是很高的，可以作为入门ModernControl的课程资料，下半学期学了一部分最优估计的内容，包括KalmanFilter和DynamicProgramming，主要是前者。很遗憾MPC没有时间讲了，所以这一部分只能等下次开课老师讲的时候来补。<em>本课程有提供github仓库。</em></p><ul><li><ahref="https://space.bilibili.com/474380277?from=search&amp;seid=9415905800355105743&amp;spm_id_from=333.337.0.0">CLEAR_LAB</a></li><li><ahref="https://space.bilibili.com/474380277/channel/collectiondetail?sid=111390">ME424现代控制与最优估计</a></li></ul><h2 id="note">Note</h2><p>  这是自己的期末复习Note，因为博客显示有size限制，所以提供<ahref="https://github.com/Judera9/Pictures-for-Blogs/tree/main/file/NoteOfModernControl.pdf">下载链接</a>：</p><div class="row">    <embed src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main/file/期末复习笔记-content.pdf" width="100%" height="550" type="application/pdf"></div><div class="row">    <embed src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main/file/期末复习笔记-part1.pdf" width="100%" height="550" type="application/pdf"></div><div class="row">    <embed src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main/file/期末复习笔记-part2.pdf" width="100%" height="550" type="application/pdf"></div><div class="row">    <embed src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main/file/期末复习笔记-part3.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <categories>
      
      <category>课程相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>b站</tag>
      
      <tag>机器人</tag>
      
      <tag>Python</tag>
      
      <tag>控制</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Anaconda in PyCharm</title>
    <link href="/2022/02/13/2022-2-13-Anaconda-in-PyCharm/"/>
    <url>/2022/02/13/2022-2-13-Anaconda-in-PyCharm/</url>
    
    <content type="html"><![CDATA[<h2 id="what-is-anaconda">What is Anaconda</h2><p>Anaconda is a powerful package management tool, it solves someweakness when using python. For example, the inconvenience of switchingamong different versions of python interpreters and many site-packages.It is similar to the function of <code>pip</code> and <code>pip3</code>,but it is more powerful.</p><h2 id="install-anaconda">Install Anaconda</h2><p>Follow the instruction in 在 <ahref="https://anaconda.org.cn/anaconda/install/linux/">Linux 上安装</a>,which supports chinese. First, you would be asked to download somedependence by the following code (my OS is Ubuntu20.04):</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">sudo apt-get install libgl1-mesa-glx libegl1-mesa libxrandr2 libxrandr2 libxss1 libxcursor1 libxcomposite1 libasound2 libxi6 libxtst6<br></code></pre></td></tr></table></figure><p>Then you would get a <code>.sh</code> file, give it executablepermission. Run the <code>.sh</code> file to install Anaconda just likein Windows. Press <code>Enter</code> all through the progress, youbetter install Anaconda in the default location, which is under the<code>/home/</code> directory. Mention that do not put it under<code>/usr</code>, the official site give a warning about this!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">chmod +x filename.sh<br>./Anaconda3-2021.11-Linux-x86_64.sh <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">Anaconda3 will now be installed into this location:<br>/home/name/anaconda3<br><br>  - Press ENTER to confirm the location<br>  - Press CTRL-C to abort the installation<br>  - Or specify a different location below<br><br>[/home/name/anaconda3] &gt;&gt;&gt; <br></code></pre></td></tr></table></figure><p>After that you would be asked to init the environment, which isactually adjusting the <code>.bashrc</code> file, like using<code>source &lt;path to conda&gt;/bin/activateconda init</code>. Afterall the steps, you would get a respond "Thank you for installingAnaconda3!"</p><h2 id="anaconda-navigator">Anaconda-navigator</h2><p>Anaconda-navigator is a GUI application provided by Anaconda, youcould use it to manage virtual environments without using terminal.Switch to the "Environments" Tab, choose the env that you areinteresting. There are 5 types of selections: <em>Installed, Notinstalled, Updatable, Selected, All</em>. If you want to install a newpackage, one method is to choose <em>Not installed</em>, and then searchthe package you want and download it.</p><h2 id="config-pycharm">Config PyCharm</h2><p>If you haven't got PyCharm, go to <ahref="https://www.anaconda.com/pycharm">this link</a> to download it!Then in the <em>New Project</em> page, choose Conda to manage the newenvironment.</p><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/others/20220213232131.png" width="600"></center><p>In the <em>Settings</em> Tab, you could add and remove packages.</p><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/others/20220213235222.png" width="600"></center>]]></content>
    
    
    <categories>
      
      <category>知识科普</category>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyCharm</tag>
      
      <tag>Anaconda</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STL入门与Iterator失效</title>
    <link href="/2022/02/12/2022-2-12-Cpp-Iterator/"/>
    <url>/2022/02/12/2022-2-12-Cpp-Iterator/</url>
    
    <content type="html"><![CDATA[<h2 id="stl六大组件">STL六大组件</h2><p>  因为于老师没讲STL，所以补一下课。STL的六大部件是下面这些：容器（Container）、算法（Algorithm）、迭代器（Iterator）、仿函数（Functionobject）、适配器（Adaptor）、空间配置器（allocator）。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://www.cnblogs.com/welen/articles/3533008.html">[1]</span></a></sup>下面分别简单介绍一下：</p><h3 id="容器-container">容器 Container</h3><table border="0" cellspacing="0" cellpadding="0"><tbody><tr><td valign="center" width="170"><center><p>容器</p></center></td><td valign="center" width="700"><center><p>特性</p></center></td><td valign="center" width="130"><center><p>所在头文件</p></center></td></tr><tr><td valign="center" width="170"><center><p>向量vector</p></center></td><td valign="center" width="700"><p>&emsp;&emsp;可以用常数时间访问和修改任意元素，</span>在序列尾部进行插入和删除时，具有常数时间复杂度，对任意项的插入和删除就有的时间复杂度与到末尾的距离成正比，尤其对向量头的添加和删除的代价是惊人的高的</p></td><td valign="center" width="130"><center><p>&lt;vector&gt;</p></center></td></tr><tr><td valign="center" width="170"><center><p>双端队列deque</p></center></td><td valign="center" width="700"><p>&emsp;&emsp;基本上与向量相同，</span>唯一的不同是，其在序列头部插入和删除操作也具有常量时间复杂度</span></p></td><td valign="center" width="130"><center><p>&lt;deque&gt;</p></center></td></tr><tr><td valign="center" width="170"><center><p>表list</p></center></td><td valign="center" width="700"><p>&emsp;&emsp;对任意元素的访问与对两端的距离成正比，但对某个位置上插入和删除一个项的花费为常数时间。</span></p></td><td valign="center" width="130"><center><p>&lt;list&gt;</p></center></td></tr><tr><td valign="center" width="170"><center><p>队列queue</p></center></td><td valign="center" width="700"><p>&emsp;&emsp;插入只可以在尾部进行，删除、检索和修改只允许从头部进行。按照先进先出的原则。</span></p></td><td valign="center" width="130"><center><p>&lt;queue&gt;</p></center></td></tr><tr><td valign="center" width="170"><center><p>堆栈stack</p></center></td><td valign="center" width="700"><p>&emsp;&emsp;堆栈是项的有限序列，并满足序列中被删除、检索和修改的项只能是最近插入序列的项。即按照后进先出的</span>原则</p></td><td valign="center" width="130"><center><p>&lt;stack&gt;</p></center></td></tr><tr><td valign="center" width="170"><center><p>集合set</p></center></td><td valign="center" width="700"><p>&emsp;&emsp;由节点组成的红黑树，每个节点都包含着一个元素，节点之间以某种作用于元素对的谓词排列，没有两个不同的元素能够拥有相同的次序，具有快速查找的功能</span>。但是它是以牺牲插入删除操作的效率为代价的</p></td><td valign="center" width="130"><center><p>&lt;set&gt;</p></center></td></tr><tr><td valign="center" width="170"><center><p>多重集合multiset</p></center></td><td valign="center" width="700"><p>&emsp;&emsp;和集合基本相同，但可以支持重复元素具有快速查找能力</span></p></td><td valign="center" width="130"><center><p>&lt;set&gt;</p></center></td></tr><tr><td valign="center" width="170"><center><p>映射map</p></center></td><td valign="center" width="700"><p>&emsp;&emsp;由{键，值}对组成的集合，以某种作用于键对上的谓词排列。具有快速查找能力</span></p></td><td valign="center" width="130"><center><p>&lt;map&gt;</p></center></td></tr><tr><td valign="center" width="170"><center><p>多重集合multimap</p></center></td><td valign="center" width="700"><p>&emsp;&emsp;比起映射，一个键可以对应多了值。具有快速查找能力</span></p></td><td valign="center" width="130"><center><p>&lt;map&gt;</p></center></td></tr></tbody></table><h3 id="算法-algorithm">算法 Algorithm</h3><p>  由头文件<code>&lt;algorithm&gt;</code>，<code>&lt;numeric&gt;</code>和<code>&lt;functional&gt;</code>组成，<code>&lt;algorithm&gt;</code>是STL头文件中最大的一个，由一大堆模板函数组成，其中常用到的功能范围涉及到比较、交换、查找、遍历操作、复制、修改、移除、反转、排序、合并等。。<code>&lt;numeric&gt;</code>体积很小，只包括几个在序列上面进行简单数学运算的模板函数，包括加法和乘法在序列上的一些操作。<code>&lt;functional&gt;</code>中则定义了一些模板类，用以声明函数对象。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://www.cnblogs.com/welen/articles/3533008.html">[1]</span></a></sup></p><h3 id="迭代器-iterator">迭代器 Iterator</h3><p>  实现位于<code>&lt;itertator&gt;</code>中，在某种程度上，可以理解为指针来使用。容器适配器stack 和 queue没有迭代器，它们包含有一些成员函数，可以用来对元素进行访问。另外，有的Iterator能够使用<code>++p</code>，<code>p++</code>，<code>*p</code>操作，还可以被复制或赋值，以及用<code>==</code>和<code>!=</code>等比较运算符。具体的每种Iterator的用法是不一样的，需要查手册。一般迭代器都会有对应的常量迭代器，能够避免用户修改指向的内容（类似constvoid*的指针）。<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="http://c.biancheng.net/view/6675.html">[3]</span></a></sup></p><table border="0" cellspacing="0" cellpadding="0"><tbody><tr><td colspan="3" valign="center"><p align="center">迭代器功能</p></center></td></tr><tr><td valign="center" width="350"><p>输入迭代器 Input iterator</p></td><td valign="center" width="350"><center><p>Reads forward</p></center></td><td valign="center" width="300"><center><p>istream</p></center></td></tr><tr><td valign="center" width="350"><p>输出迭代器 Output iterator</p></td><td valign="center" width="350"><center><p>Writes forward</p></center></td><td valign="center" width="300"><center><p>ostream, inserter</p></center></td></tr><tr><td valign="center" width="350"><p>前向迭代器 Forward iterator</p></td><td valign="center" width="350"><center><p>Read and Writes forward</p></center></td><td valign="center" width="300"><center><p> </p></center></td></tr><tr><td valign="center" width="350"><p>双向迭代器 Bidirectional iterator</p></td><td valign="center" width="350"><center><p>Read and Writes forward and backward</span></p></center></td><td valign="center" width="300"><center><p>list, set, multiset, map, mul, timap</span></p></center></td></tr><tr><td valign="center" width="350"><p>随机迭代器 Random access iterator</p></td><td valign="center" width="350"><center><p>Read and Write with random access</p></center></td><td valign="center" width="300"><center><p>vector, deque, array, string</p></center></td></tr></tbody></table><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 举个例子，如何使用Iterator</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    vector&lt;<span class="hljs-keyword">int</span>&gt; v&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; v.<span class="hljs-built_in">size</span>(); ++i) <span class="hljs-comment">// use for loop to iterate</span><br>        cout &lt;&lt; v[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    cout &lt;&lt; endl;<br><br>    vector&lt;<span class="hljs-keyword">int</span>&gt;::iterator i; <span class="hljs-comment">// declare iterator</span><br>    <span class="hljs-keyword">for</span> (i = v.<span class="hljs-built_in">begin</span>(); i != v.<span class="hljs-built_in">end</span>(); ++i) <span class="hljs-comment">// use `i &lt; v.end()` is also fine</span><br>        cout &lt;&lt; *i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    cout &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="仿函数-functor">仿函数 Functor</h3><p>  仿函数(functor)又称之为函数对象（functionobject），其实就是重载了()操作符的struct或者class，使一个类的使用看上去象一个函数。这些仿函数可以用关联，聚合，依赖的类之间的关系，与用到他们的类组合在一起，这样有利于资源的管理。C语言使用函数指针和回调函数来实现仿函数；在C++里，我们通过在一个类中重载括号运算符的方法使用一个函数对象，而不是一个普通函数。<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://blog.csdn.net/K346K346/article/details/82818801">[2]</span></a></sup></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 在C语言中，例如一个用来排序的函数可以这样使用仿函数</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">/* Callback function */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compare_ints_function</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* A, <span class="hljs-keyword">void</span>* B)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> *((<span class="hljs-keyword">int</span>*)(A)) &lt; *((<span class="hljs-keyword">int</span>*)(B));<br>&#125;<br><br><span class="hljs-comment">/* Declaration of C sorting function */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* first_item, <span class="hljs-keyword">size_t</span> item_size, <span class="hljs-keyword">void</span>* last_item, <span class="hljs-keyword">int</span>(*cmpfunc)(<span class="hljs-keyword">void</span>*, <span class="hljs-keyword">void</span>*))</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> items[]=&#123;<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;;<br>    sort((<span class="hljs-keyword">void</span>*)(items), <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>), (<span class="hljs-keyword">void</span>*)(items +<span class="hljs-number">3</span>), compare_ints_function);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 在C++中，重载括号运算符实现仿函数</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IsGreaterThanThresholdFunctor</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">IsGreaterThanThresholdFunctor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> t)</span> : threshold(t) &#123;</span>&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> <span class="hljs-keyword">const</span> </span>&#123; <span class="hljs-comment">// 可以用户design这一部分</span><br>        <span class="hljs-keyword">return</span> num &gt; threshold;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> threshold; <span class="hljs-comment">// 利用成员变量的特性，避免全局变量</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">RecallFunc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *start, <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> *end, IsGreaterThanThresholdFunctor myFunctor)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> *i = start; i != end + <span class="hljs-number">1</span>; i++) &#123;<br>        count = <span class="hljs-built_in">myFunctor</span>(*i) ? count + <span class="hljs-number">1</span> : count; <span class="hljs-comment">// 传参给operator()函数</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> a[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">100</span>, <span class="hljs-number">11</span>, <span class="hljs-number">5</span>, <span class="hljs-number">19</span>&#125;;<br>    <span class="hljs-keyword">int</span> result = <span class="hljs-built_in">RecallFunc</span>(a, a + <span class="hljs-number">4</span>, <span class="hljs-built_in">IsGreaterThanThresholdFunctor</span>(<span class="hljs-number">10</span>));<br>    cout &lt;&lt; result &lt;&lt; endl; <span class="hljs-comment">// 3</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="适配器-adaptor-空间配置器-allocator">适配器 Adaptor &amp;空间配置器 Allocator</h3><p>  适配器是用来修改其他组件接口的STL组件，是带有一个参数的类模板（这个参数是操作的值的数据类型）。STL定义了3种形式的适配器：容器适配器，迭代器适配器，函数适配器。</p><ul><li><p><strong>容器适配器</strong>：包括栈（stack）、队列(queue)、优先(priority_queue)。使用容器适配器，stack就可以被实现为基本容器类型（vector,dequeue,list）的适配。可以把stack看作是某种特殊的vctor,deque或者list容器，只是其操作仍然受到stack本身属性的限制。queue和priority_queue与之类似。容器适配器的接口更为简单，只是受限比一般容器要多。</p></li><li><p><strong>迭代器适配器</strong>：修改为某些基本容器定义的迭代器的接口的一种STL组件。反向迭代器和插入迭代器都属于迭代器适配器，迭代器适配器扩展了迭代器的功能。</p></li><li><p><strong>函数适配器</strong>：通过转换或者修改其他函数对象使其功能得到扩展。这一类适配器有否定器（相当于"非"操作）、绑定器、函数指针适配器。函数对象适配器的作用就是使函数转化为函数对象，或是将多参数的函数对象转化为少参数的函数对象。</p></li></ul><p>  STL内存配置器为容器分配并管理内存，统一的内存管理使得STL库的可用性、可移植行、以及效率都有了很大的提升。SGI-STL的空间配置器有2种，一种仅仅对c语言的malloc和free进行了简单的封装，而另一个设计到小块内存的管理等，运用了内存池技术等。在SGI-STL中默认的空间配置器是第二级的配置器。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://www.cnblogs.com/welen/articles/3533008.html">[1]</span></a></sup></p><h2 id="具体学习iterator">具体学习Iterator</h2><h3 id="自增操作">自增操作</h3><p>  注意<code>A(i++);</code>是先执行<code>A(i)</code>，再执行<code>i++;</code>，后者相反。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br>    cout &lt;&lt; i++ &lt;&lt; endl; <span class="hljs-comment">// 1</span><br>    cout &lt;&lt; ++i &lt;&lt; endl; <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><h3 id="迭代器失效">迭代器失效</h3><p>可以参考<ahref="https://blog.csdn.net/u010318270/article/details/78575371?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;utm_relevant_index=2">第四个Reference</a>，讲的很细致。关键的点基本都在下面：<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://blog.csdn.net/u010318270/article/details/78575371?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;utm_relevant_index=2">[4]</span></a></sup></p><ul><li>C++标准中，<strong>顺序容器的erase函数会返回iterator，但关联容器的erase函数不返回iterator</strong>；</li><li>对于顺序容器vector、deque，删除当前的iterator会使后面所有元素的iterator都失效。这是因为vector、deque使用了连续分配的内存，删除一个元素导致后面所有的元素会向前移动一个位置。erase方法可以返回下一个有效的iterator；</li><li>对于关联容器map、set、multimap、multiset，删除当前的iterator，仅仅会使当前的iterator失效，只要在erase时，递增当前iterator即可。这是因为map之类的容器，使用了红黑树来实现，插入、删除一个结点不会对其他结点造成影响；</li><li>对于顺序容器list，erase方法可以返回下一个有效的iterator。由于list是一个链表，删除当前的iterator，仅仅会使当前的iterator失效，所以也可以在erase时，递增当前的iterator。</li><li>erase函数返回被删除元素的下一个元素的迭代器。<strong>在STL中，不能以指针来看待迭代器，指针是与内存绑定的，而迭代器是与容器里的元素绑定的</strong>。</li></ul><h2 id="reference">Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1"class="footnote-text"><span>https://www.cnblogs.com/welen/articles/3533008.html<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2"class="footnote-text"><span>https://blog.csdn.net/K346K346/article/details/82818801<a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:3"class="footnote-text"><span>http://c.biancheng.net/view/6675.html<a href="#fnref:3" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:4"class="footnote-text"><span>https://blog.csdn.net/u010318270/article/details/78575371?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;utm_relevant_index=2<a href="#fnref:4" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>Iterator</tag>
      
      <tag>STL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>介绍树莓派Pico | MicroPython插件</title>
    <link href="/2022/02/12/2022-2-12-Introduction-to-Pico-MicroPython-Plugin-Of-Pycharm/"/>
    <url>/2022/02/12/2022-2-12-Introduction-to-Pico-MicroPython-Plugin-Of-Pycharm/</url>
    
    <content type="html"><![CDATA[<h2 id="raspberry-pico">Raspberry Pico</h2><p>推荐网页：<a href="https://pico.org.cn/">树莓派 Pico 中文站</a></p><blockquote><p>上面的站点提供了树莓派 Pico 开发板的说明文档，以及完备的 RP2040芯片资料，本文也有参考上面的内容。</p></blockquote><h3 id="pico-规格参数">Pico 规格参数</h3><p>  这里涉及了很多嵌入式方面的知识，这一块我学的不是很好，有一些看得不是很明白的以后用到再来学吧。看了看相关的评测<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://www.zhihu.com/question/440677296">[3]</span></a></sup>，ESP32不仅比Pico便宜而且外设还丰富的多，而且也支持MicroPython。不过我自己也只是买着玩玩，不用在意这些，个人感觉主要树莓派学习门槛更低吧。</p><ul><li>双核 Arm Cortex-M0 + @ 133MHz</li><li>芯片内置 264KB SRAM 和 2MB 的板载闪存</li><li>通过专用 QSPI 总线支持最高 16MB 的片外闪存</li><li>DMA 控制器</li><li>30 个 GPIO 引脚，其中 4 个可用作模拟输入</li><li>2 个 UART、2 个 SPI 控制器和 2 个 I2C 控制器</li><li>16 个 PWM 通道</li><li>USB 1.1 主机和设备支持</li><li>8 个树莓派可编程 I/O（PIO）状态机，用于自定义外围设备支持</li><li>支持 UF2 的 USB 大容量存储启动模式，用于拖放式编程</li></ul><blockquote><p><strong>SRAM是什么</strong>：SRAM (static RAM) is random accessmemory (RAM) that retains data bits in its memory as long as power isbeing supplied. Unlike dynamic RAM (DRAM), which stores bits in cellsconsisting of a capacitor and a transistor, SRAM does not have to beperiodically refreshed. Static RAM provides faster access to data and ismore expensive than DRAM. SRAM is used for a computer's cache memory andas part of the random access memory digital-to-analog converter on avideocard.<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://whatis.techtarget.com/definition/SRAM-static-random-access-memory">[1]</span></a></sup></p></blockquote><blockquote><p><strong>QSPI是什么</strong>：QSPI是QueuedSPI的简写，是Motorola公司推出的SPI接口的扩展，比SPI应用更加广泛。在SPI协议的基础上，Motorola公司对其功能进行了增强，增加了队列传输机制，推出了队列串行外围接口协议（即QSPI协议）。片外闪存顾名思义就是外接的Flash存储空间。<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://www.cnblogs.com/firege/p/9435349.html">[2]</span></a></sup></p></blockquote><blockquote><p><strong>PIO是什么</strong>：这是应该是Pico最大的亮点，我没有看得很明白官方的说明。大概就是说能够使用PIO来实现硬件接口，相对于软件模拟的方式，可以达到更高的时钟精度、高得多的I/O吞吐量，还能分担一点CPU的计算工作，比如奇偶校验、和校验等。<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="https://www.zhihu.com/question/440677296">[3]</span></a></sup></p></blockquote><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main/img/2022/pico/20220212190432.png" width="1000"><center>Pico原理图</center></center><h3 id="pico提供的开发工具">Pico提供的开发工具</h3><p>  有一个C++的SDK，是专门给Pico设计的，感觉没有必要，用这套SDK不如用STM32系列的SDK。除了C++之外还有一个MicroPython的SDK，我是打算用这个来做点小东西，顺便学习一下各种嵌入式常见的外设。除此之外，学一些MicroPython也挺好的，主要看这个文档<ahref="https://datasheets.raspberrypi.com/pico/raspberry-pi-pico-python-sdk.pdf">PicoPython SDK</a>。除此之外还有<ahref="https://datasheets.raspberrypi.com/rp2040/hardware-design-with-rp2040.pdf">RP2040硬件设计</a>、<ahref="https://datasheets.raspberrypi.com/rp2040/rp2040-datasheet.pdf">RP2040Datasheet</a>和<ahref="https://datasheets.raspberrypi.com/pico/pico-datasheet.pdf">树莓派PicoDatasheet</a>这三个文档也可以作为学习过程的参考，主要和RP2040和Pico的硬件外设有关。</p><h2 id="pycharm-micropython-插件">PyCharm MicroPython 插件</h2><p>  直接在PyCharm的Settings-Plugins中去搜索“MicroPython”插件然后安装，完成后需要在Project中进行配置，在Settings-Languages&amp; Frameworks-MicroPython对开启该插件进行勾选，然后选择对应的Devicetype和Device path（我是在linuxubuntu下所以是dev/ttyACM0）。完成配置后使用如下程序进行测试，如果LED灯闪烁说明配置成功（REPL显示对应输出）：</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> machine <span class="hljs-keyword">import</span> Pin<br><span class="hljs-keyword">import</span> time<br><br>led = Pin(<span class="hljs-number">25</span>, Pin.OUT)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    led.value(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;led light on&quot;</span>)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>    led.value(<span class="hljs-number">0</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;led light off&quot;</span>)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br></code></pre></td></tr></table></figure><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/pico/20220212200558.png" width="600"><center>Pico原理图</center></center><h2 id="reference">Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1"class="footnote-text"><span>https://whatis.techtarget.com/definition/SRAM-static-random-access-memory<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2"class="footnote-text"><span>https://www.cnblogs.com/firege/p/9435349.html<a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:3"class="footnote-text"><span>https://www.zhihu.com/question/440677296<a href="#fnref:3" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>知识科普</category>
      
      <category>学习笔记</category>
      
      <category>Raspberry Pico</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyCharm</tag>
      
      <tag>Python</tag>
      
      <tag>Raspberry</tag>
      
      <tag>Pico</tag>
      
      <tag>MicroPython</tag>
      
      <tag>嵌入式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《Effective C++ 第三版》0 导读</title>
    <link href="/2022/02/02/2022-2-2-Effective-Cpp-Introduction/"/>
    <url>/2022/02/02/2022-2-2-Effective-Cpp-Introduction/</url>
    
    <content type="html"><![CDATA[<h2 id="terminology">Terminology</h2><h3 id="声明-declaration">声明-declaration</h3><p>在《C++ Primer》中提到：</p><blockquote><p>变量声明：用于向程序表明变量的类型和名字。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs Cpp"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> x; <span class="hljs-comment">// declare an object</span><br><span class="hljs-function">std::<span class="hljs-keyword">size_t</span> <span class="hljs-title">numDigits</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span></span>; <span class="hljs-comment">// declare a function</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Widget</span>;</span> <span class="hljs-comment">// declare a class</span><br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-comment">// declare a template</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GraphNode</span>;</span><br></code></pre></td></tr></table></figure><h4 id="extern关键字">extern关键字</h4><p>  通过使用extern关键字能够声明变量名而不定义它，使用extern编译器不会给变量分配存储空间。所以<code>externint x;</code>是声明而不是定义，而<code>intx;</code>是声明也是定义。但是如果对声明进行了initialization，如<code>externint x = 1;</code>，则一定是定义。</p><p>  对函数来说如果加了<code>&#123;&#125;</code>就是定义，如果没有就是声明。<strong>在一个程序中，变量或函数可以声明多次（如下会提示<code>Clang-Tidy:Redundant 'foo'declaration</code>），但是定义只能有一次</strong>，如下代码能够编译成功：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>; <span class="hljs-comment">// declaration</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>; <span class="hljs-comment">// redundant declaration</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>&#123; <span class="hljs-comment">// definition</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="使用std">使用std</h4><p>  为了方便，作者在后面章节的代码中省略了C++标准程序库的命名空间<code>std::</code>的书写，但是在实际编译时是不能省略的。另外，<code>usenamespacestd;</code>并不是一个好选择，因为会引入很多不必要的名称，这可能会导致灾难性的结果。在《C++Primer Plus》的“第九章-内存模型和名称空间”中，提到：</p><blockquote><p>  一般说来，使用using命令比使用using编译命令更安全，这是由于它只导入了制定的名称。如果该名称与局部名称发生冲突，编译器将发出指示。using编译命令导入所有的名称，包括可能并不需要的名称。<strong>如果与局部名称发生冲突，则局部名称将覆盖名称空间版本，而编译器并不会发出警告。</strong>另外，名称空间的开放性意味着名称空间的名称可能分散在多个地方，这使得难以准确知道添加了哪些名称。</p></blockquote><h4 id="为什么使用size_t">为什么使用size_t</h4><p>  上面提到的标准库中的size_t，是很多C++Programmer知道但是很多时候不敢用的一个typedef的unsignedinteger类型。使用size_t能够使得代码更加便于在不同系统间移植（如IP16L32和I16PL32），同时增加移植性和可读性，可以参考给出的链接<ahref="http://web.archive.org/web/20101209143037/http://www.eetimes.com/discussion/programming-pointers/4026076/Why-size-t-matters?">Whysize_t matters</a>。</p><h4 id="函数签名-signature">函数签名-signature</h4><p>  官方定义的C++signature只包括函数的参数，不包括返回类型。编译器在检查函数signature是否重复时，如果两个函数声明只有返回类型不同，编译器同样会报错，因为它不知道调用的是哪个函数。但是本书为了帮助理解将返回类型视为signature的一部分。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>;<br></code></pre></td></tr></table></figure><p>  上面的declaration我使用C++14标准会报<em>“Functions that differ onlyin their return type cannot beoverloaded”</em>。如下的代码是可以编译通过的（对于C89来说这两种都不行，C只检查函数名，而不会将参数类型和返回值加到signature中）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="定义-definition">定义-definition</h3><p>  书中描述是<em>“definition的任务是提供编译器一些声明式所遗漏的细节“</em>，个人感觉说的不够清楚。在《C++Primer》中提到：</p><blockquote><p>变量定义：用于为变量分配存储空间，还可为变量指定初始值。程序中，变量有且仅有一个定义（定义也是声明）。</p></blockquote><h4 id="关于声明与定义的程序设计风格">关于声明与定义的程序设计风格</h4><p>  参考博客<ahref="https://blog.csdn.net/sjxbf/article/details/6310150">C++定义与声明区别</a>，我觉得有几点很值得注意：</p><ol type="1"><li>不要把变量定义放入.h文件，这样容易导致重复定义错误。</li><li>但是值在编译时就已知的const变量的定义、类的定义、inline函数的定义可以放到头文件中。</li><li>尽量使用static关键字把变量定义限制于该源文件作用域，除非变量被设计成全局的。</li><li>可以在头文件中声明一个变量，在用的时候包含这个头文件就声明了这个变量。</li></ol><h3 id="初始化-initialization">初始化-initialization</h3><p>  初始化是“给予对象初值”的过程，通常由构造函数constructor完成。需要注意如下三个特别的构造函数：default构造函数、copy构造函数、以及copyassignment操作符。</p><h4 id="default构造函数">default构造函数</h4><p>  default构造函数的要求是<em>“一个可被调用而不带任何实参者”</em>，也可以是每个参数都有缺省值。<strong>通常来说，建议构造函数被声明为explicit，这样能够阻止implicittype conversions。</strong></p><h4 id="copy构造函数和copy-assignment操作符">copy构造函数和copyassignment操作符</h4><p>  copy构造函数被用来<em>“以同型对象初始化自我对象”</em>，而copyassignment操作符被用来<em>“从另一个同型对象中拷贝其值到自我对象”</em>。copy构造和copy赋值的区别在于是否有新的对象被创建。<strong>这两个都是典型的pass-by-value的方式，而一般更好的方式是pass-by-reference-to-const。</strong>书中的例子如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Widget</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Widget</span>(); <span class="hljs-comment">// default构造函数</span><br>    <span class="hljs-built_in">Widget</span>(<span class="hljs-keyword">const</span> Widget&amp; rhs); <span class="hljs-comment">// copy构造函数</span><br>    Widget&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> Widget&amp; rhs); <span class="hljs-comment">// copy assignment操作符</span><br>    ...<br>&#125;;<br>Widget w1; <span class="hljs-comment">// 调用default构造函数</span><br><span class="hljs-function">Widget <span class="hljs-title">w2</span><span class="hljs-params">(w1)</span></span>; <span class="hljs-comment">// 调用copy构造函数</span><br>w1 = w2; <span class="hljs-comment">// 调用copy assignment操作符</span><br></code></pre></td></tr></table></figure><h3 id="standard-template-library-stl">Standard TemplateLibrary-STL</h3><p>  是C++标准程序库的一部分，内含容器（vector、list、set、map等），迭代器（iterator、set<string>::iterator等），算法（for_each、find、sort等）及其相关机能。作者说STL是非常有用的，不过我基本没用过（因为我C++课的老师主要让我们搞速度优化，用STL肯定卷不过别人了）。</p><h3 id="不明确行为-undefined-behavior">不明确行为-undefinedbehavior</h3><p>  带有undefinedbehavior的程序通常是令人崩溃的，这样的程序即使能够编译成功，在执行过程中可能有时正常执行，有时造成崩坏，有时产生不正确的结果。因此，使用C++编程时要能够自己处理异常并小心避免undefinedbehavior。下面程序的返回值就是一个随机的结果，因为数组name的大小为6，发生了越界。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">char</span> name[] = <span class="hljs-string">&quot;Darla&quot;</span>;<br><span class="hljs-keyword">char</span> c = name[<span class="hljs-number">10</span>];<br>std::cout &lt;&lt; c &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><h2 id="tr1和boost">TR1和Boost</h2><p>TR1是描述C++许多新机能的一份规范，而Boost是一个相关的开源平台。关于这方面，下面提供了一些可能有帮助的C++学习相关资源链接。</p><ul><li><ahref="https://www.runoob.com/cplusplus/cpp-useful-resources.html">C++有用的资源</a></li><li><a href="https://en.cppreference.com/w/cpp/header">C++ StandardLibrary headers</a></li><li><a href="https://en.wikibooks.org/wiki/C++_Programming">C++Programming（书）</a></li><li><a href="http://www.sunistudio.com/cppfaq/">C++ FAQ LITE —Frequently Asked Questions</a></li><li><a href="https://www.thefreecountry.com/sourcecode/cpp.shtml">Free C/ C++ Libraries, Source Code and Frameworks</a></li><li><a href="https://www.boost.org/">boost</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Effective C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《Effective C++ 第三版》阅读笔记目录</title>
    <link href="/2022/02/02/2022-2-2-Effective-Cpp-Content/"/>
    <url>/2022/02/02/2022-2-2-Effective-Cpp-Content/</url>
    
    <content type="html"><![CDATA[<p>  《Effective C++第三版》这本书给出了55条使用C++编程时需要注意的要点，帮助程序员写出更加优雅合理的程序。如导读里所说，<em>“学习程序语言根本大法是一回事；学习如何以某种语言设计并实现高效程序则是另一回事”</em>，在这方面C++是代表。因此，本书的目的不是教你学会C++，而是学习如何写出Effective的C++程序。</p><p>  我记录这篇笔记的目的是为了提取我自己认为重要，或是需要的条款，方便以后写代码时随时能够查看使用。因此，有些地方可能会进行拓展学习，有些地方只是一笔带过。个人能力有限，如果有错误的内容烦请在评论区指正！</p><p>  另外帮我的C++课老师于仕琪教授打个广告，他的C++程序设计课程体验很棒。大家可以去<ahref="https://space.bilibili.com/519963684?from=search&amp;seid=2332289542653409243&amp;spm_id_from=333.337.0.0">b站</a>围观一下，并且这里也提供了他的<ahref="https://github.com/ShiqiYu/CPP">课程仓库</a>，大家可以下载ppt和实例代码看看，课程讲了很多矩阵运算优化方法。</p><h2 id="catalog">Catalog</h2><ol start="0" type="1"><li><ahref="https://judera9.github.io/2022/02/02/2022-2-2-Effective-Cpp-Introduction/">Introduction</a></li><li><a href="">Accustoming Yourself to C++</a></li><li><a href="">Constructors, Destructors, and AssignmentOperators</a></li><li><a href="">Resource Management</a></li><li><a href="">Designs and Declarations</a></li><li><a href="">Implementations</a></li><li><a href="">Inheritance and Object-Oriented Design</a></li><li><a href="">Templates and Generic Programming</a></li><li><a href="">Customizing new and delete</a></li><li><a href="">Miscellany</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Effective C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>陆地冲浪板介绍与选型</title>
    <link href="/2022/01/30/2022-1-30-Surfskate-Selection/"/>
    <url>/2022/01/30/2022-1-30-Surfskate-Selection/</url>
    
    <content type="html"><![CDATA[<hr /><h2 id="surfskate的由来">Surfskate的由来</h2><p>  中文名陆地冲浪板（简称“陆冲”），板如其名，是用于模拟海上冲浪的。众所周知，冲浪要在暖季合适的海岸，滑雪要在冬季合适的雪地，条件苛刻，更别提大家疲于996福报很少有时间出行去冲浪滑雪。因此，入手一个陆地冲浪板能够帮助提高技能水平，是冲浪滑雪很好的练习道具。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/surfskate/Surfskate-Selection-surf.jpeg" height="250" /></div><div class="group-image-wrap"><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/surfskate/Surfskate-Selection-ski.png" height="250" /></div></div></div><h2 id="市面大牌选型">市面大牌选型</h2><p>  可以参考<ahref="https://www.zhihu.com/people/surfskate">这个链接</a>，这位大佬对于每种品牌的特点和桥的特点都说的很明白。这个大佬做了一张图，我只用过Yow的桥没啥发言权，所以参考这位老兄的经验肯定是靠谱的。</p><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/others/choose_surfskate.jpg" width=1000"></center><h2 id="保养与维护">保养与维护</h2>    <div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">        <iframe src="//player.bilibili.com/player.html?aid=62322438&bvid=BV1ht411M78i&cid=108319980&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;" ></iframe>    </div><p>另外还可以参考：</p><ul><li><a href="https://www.bilibili.com/video/av89625664">YOW陆地冲浪板官方维修指南 Surf YOW Systems Tutorial</a></li><li><ahref="https://zhuanlan.zhihu.com/p/105870163">Carver冲浪滑板和其他Surfskate陆地冲浪板入门到快乐（五）维修篇</a></li><li><ahref="https://space.bilibili.com/508830">猫咪贵族（b站一位玩陆冲的大佬）</a></li></ul><h2 id="玩法show">玩法show</h2><ol type="1"><li><ahref="https://zhuanlan.zhihu.com/p/82459365">陆地冲浪surfskate入手后的问题和使用说明书！</a></li><li><ahref="https://www.bilibili.com/video/BV1wy4y1E7KL?from=search&amp;seid=16512587863776667224&amp;spm_id_from=333.337.0.0">日本小哥横刹(PowerSlide)教学【搬运|字幕】</a></li></ol><p><em>我玩的经验下次博客再介绍吧（等我玩熟练了先） ヾ(=･ω･=)o</em></p>]]></content>
    
    
    <categories>
      
      <category>杂学笔记</category>
      
      <category>知识科普</category>
      
      <category>陆地冲浪/冲浪/滑雪</category>
      
    </categories>
    
    
    <tags>
      
      <tag>surfskate</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>乐理基础</title>
    <link href="/2022/01/30/2022-1-30-Music-Theory/"/>
    <url>/2022/01/30/2022-1-30-Music-Theory/</url>
    
    <content type="html"><![CDATA[<p>图片和教程来源，<ahref="https://www.bilibili.com/video/BV14x411s7KZ?p=1">bilibili乐球网编曲教程</a>。个人仅作笔记，侵删。</p><span id="more"></span><h2 id="音程">音程</h2><p>  我们能够用<strong>属性+大小+单位</strong>的方式来描述音程。音程是两个音之间的距离，单位都是度；大小有从一到七；属性有<strong>纯、大、小、增、减、倍增、倍减</strong>。</p><h3 id="音程大小">音程大小</h3><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/music/20220204192938.png" width="550"><center>图 1</center></center><ul><li>对于白键：直接数两者之间有几个白键就是几度，注意是包括开始和结束的键；</li><li>对于黑键：首先还原黑键，然后和白键一样数就行；</li></ul><blockquote><p>  也可以这样，sou就是5，升re就是♯2（或者♭3），因此对应(5-2)+1=4，所以是四度。不过好像跨了下一个八度就不好算了，还是好好数琴键吧&gt;_&lt;|||</p></blockquote><h3 id="音程属性">音程属性</h3><p>  如图1所示，尽管大小相同，还需要区分属性。<strong>“纯”只存在于一、四、五、八度中，“大/小“只存在于二、三、六、七度中，而“增、减、倍增、倍减”存在于所有度数大小</strong>。即，不存在纯三度或大四度。</p><h3 id="标准音程与音程计算">标准音程与音程计算</h3><p>  标准音程是以C为起点到下一个八度的C为止，共七个白键音程的名称。如图2所示：</p><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/music/20220204203925.png" width="550"><center>图 2</center></center><p>  对于不是两个琴键都落在白键上的情况，遵循以下的步骤进行计算：</p><ol type="1"><li>找大小：还原升降号，然后数白键的数量；</li><li>找属性：数白键和黑键的总数，通过图3的公式和标准音程比较，进行计算；</li></ol><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/music/20220204204602.png" width="550"><center>图 3</center></center><p>  例如：对于♯F和D，如图4所示。首先，还原♯F，F和D之间有6个琴键，所以是六度。标准的六度是10个键，对应的是大六度。然后，数白键与黑键一共是9个键，因此根据公式结果是小六度。</p><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/music/20220204205257.png" width="550"><center>图 4</center></center><blockquote><p>  我自己总结也差不多，假设E和F之间以及B和C之间少了一个黑键我们叫做一个坑（“少了个黑键”），那么最终其实就是比较坑的数量嘛。假设还是♯F和D，很容易发现♯F和G之间由于升降号导致了一个坑，在B和C之间本来有一个坑，那么一共是两个坑。标准的六度是一个坑（标准的四度到七度都是一个坑），所以♯F到D比标准的多了一个坑（“少了一个黑键”），因此是小六度。</p></blockquote><h2 id="和弦">和弦</h2><p>  和弦就是<strong>以任何一个音作为根音，往上按照三度的音程关系叠加构成的组合</strong>。和弦最少是三个音，两个音的是音程。所谓三和弦，指的是根音到冠音的度数是三，而后面直到十三和弦以此类推。音最多的十三和弦有7个音，刚好从C到B。</p><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/music/20220204223656.png" width="550"><center>图 5</center></center><h3 id="三和弦">三和弦</h3><p>  属性包括“<strong>大三和弦、小三和弦、增三和弦、减三和弦</strong>”，其中增三和弦在流行乐中很少用到，所以这里不讲。区分大三和弦，小三和弦和减三和弦的方式是看三和弦的两个音程的属性，如图6：</p><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/music/20220204231246.png" width="550"><center>图 6</center></center><p>  例如：FAC是大三度+小三度=F大三和弦，F♭AC是小三度+大三度=F小三和弦，F♭A♭C是小三度+小三度=F减三和弦（这就是F为根音对应的几个三和弦）</p><h3 id="七和弦">七和弦</h3><p>  属性主要包括“<strong>大大七和弦、小小七和弦、大小七和弦、减小七和弦、减减七和弦</strong>”，其中我们并不会这么叫，实际的叫法是“<strong>大七和弦、小七和弦、属七和弦、半减七和弦、减七和弦</strong>”。区分它们的方法建立在三和弦的分类基础上，如图7所示：</p><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/music/20220204233441.png" width="550"><center>图 7</center></center><p>  例如：DFAC是小三和弦+小七度=D小七和弦，DF♭AC是减三和弦+小七度=D半减七和弦，DF♭A♭C是减三和弦+减七度=D减七和弦（这就是D为根音对应的几个七和弦）</p><blockquote><p>这里其实可以换一种理解方式（可能更好计算一点）：</p><ul><li><p>大三和弦+大三（大七）=大七和弦</p></li><li><p>大三和弦+小三（小七）=属七和弦</p></li><li><p>小三和弦+小三（小七）=小七和弦</p></li><li><p>减三和弦+大三（小七）=半减七和弦</p></li><li><p>减三和弦+小三（减七）=减七和弦</p></li></ul></blockquote><h3 id="和弦转位">和弦转位</h3><p>  和弦转位其实就是将和弦中的某个或某些音提高了八度，然后低音变成了其他音。如图8中C（表示C大三和弦）的转位，由于除了根音外有两个音，所以三和弦都是有两个转位的。图8中间的<strong>C/E就是C和弦第一转位，“/”前面的“C”表示这是一个C和弦，后面的“E”表示低音演奏E</strong>；而C/G同理。注意到，对于C/E来说，只要保证低音是E，上面不论是135还是513都没有关系，都是C和弦第一转位。</p><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/music/20220204234704.png" width="550"><center>图 8</center></center><p>  对于七和弦，也是同样的道理。例如：CM7（也就是C小七和弦）是CEGB是原位，然后第一转位是CM7/E，也就是E...（如EGBC），第二转位是G...（如GBCE），以此类推共有三个和弦转位。再比如下图9，原位是D7（D属七和弦），对应的三个转位是D7/♯F、D7/A、D7/C。</p><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/music/20220205000556.png" width="550"><center>图 9</center></center><h2 id="音调">音调</h2><p>  对于一首歌，如果调太高了唱不上去，我们通常会降调，音阶整体上移或下移就是变调（变调是不会改变旋律本身的）。首先是自然大调和自然小调，在其基础上对六音和七音进行升降就得到和声大调、旋律大调、和声小调、旋律小调。</p><h3 id="自然大调">自然大调</h3><p>  总结来说，<strong>听起来像CDEFGABC的就是自然大调</strong>，上述是C大调。再比如说，♭D大调是♭D♭EF♭G♭A♭BC♭D，E大调是E♯F♯GAB♯C♯DE，这些自然大调的音阶结构，都是如下图10所示：</p><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/music/20220205103723.png" width="550"><center>图 10</center></center><h3 id="自然小调">自然小调</h3><p>  总结来说，<strong>听起来像ABCDEFGA的就是自然大调</strong>，上述是A小调。再比如说，C小调是CD♭EFG♭A♭BC。自然小调的音阶结构如下图11所示。由此，我们又能够看出，C大调和A小调的音是一样的，只是顺序不同而已，因此它们称为<strong>关系大小调</strong>。除此之外，C大调的C和A小调的A之间差了一个小3°，因此所有的关系大小调间也是差了一个小3°。例如，C小调的关系大调是♭E大调。</p><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/music/20220205110501.png" width="550"><center>图 11</center></center><h3 id="如何辨别一首歌的调">如何辨别一首歌的调</h3><blockquote><p>  这里貌似教程少了这方面的内容，所以另外找了个讲的很好的视频补上！<strong>其实就是听最后的结尾旋律，一般流行乐的结尾音就是这个调的调名啦</strong>，不过我乐感好拉跨（羡慕绝对音感的人）。</p></blockquote>    <div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">        <iframe src="//player.bilibili.com/player.html?aid=43075656&bvid=BV1cb411S7ra&cid=141283989&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;" ></iframe>    </div><h3 id="调性">调性</h3><p>  即在自然大调和自然小调的基础上对六音和七音进行升降，如下图12所示。例如：要找E和声大调，首先找到E自然大调E♯F♯GAB♯C♯DE，然后降低六音得到E♯F♯GABC♯DE，此时再降低七音得到E旋律大调E♯F♯GABCDE。</p><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/music/20220205140927.png" width="550"><center>图 12</center></center><h2 id="音符">音符</h2><p>  音符就比较简单了，即所谓表示演奏时间的长短。这一部分因为自己好歹学了多年演奏，比较熟练所以就懒得记太多了。图13是从全音符到六十四分音符单个的写法（六十四一般用不到）。图14是节拍的写法，例如：3/4念作四三拍，表示以四分音符为一拍，一个小节是三拍。</p><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/music/20220205141824.png" width="550"><center>图 13</center></center><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/music/20220205142042.png" width="550"><center>图 14</center></center><h3 id="附点音符">附点音符</h3><p>  附点音符=原音符+原音符的一半，如图15。附点在乐谱上的写法也要注意，如果音符在第n线上，那个附点标记在这条线的上面的间；如果音符在间上，那么直接标记在这个间就可以了。</p><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/music/20220205142607.png" width="550"><center>图 15</center></center><h3 id="休止符">休止符</h3><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/music/20220205143000.png" width="550"><center>图 16</center></center><h3 id="连音">连音</h3><p>  概念比较简单，注意连音的写法。如果音符是四分音符，标了三连音的符号之后（三连音对应到2），相当于4个四分音符也就是两拍，即<strong>在两拍内演奏完三连音</strong>。再比如如下图17，音符是十六分音符（五、六、七连音对应到4），相当于4个十六分音符也就是一拍，即<strong>在一拍内演奏完五、六、七连音</strong>。以此类推，9～15连音对应到8进行相应的计算。</p><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main//img/2022/music/20220205144219.png" width="550"><center>图 17</center></center>]]></content>
    
    
    <categories>
      
      <category>杂学笔记</category>
      
      <category>编曲</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编曲</tag>
      
      <tag>b站</tag>
      
      <tag>乐理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器人娱乐与文学</title>
    <link href="/2022/01/30/2022-1-30-Robot-Introduction/"/>
    <url>/2022/01/30/2022-1-30-Robot-Introduction/</url>
    
    <content type="html"><![CDATA[<div class="row">    <embed src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main/file/robotIntroductionPaper.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <categories>
      
      <category>知识科普</category>
      
      <category>课程相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器人</tag>
      
      <tag>文学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>宝冢与歌剧少女</title>
    <link href="/2022/01/30/2022-1-30-Takarazuka-Revue/"/>
    <url>/2022/01/30/2022-1-30-Takarazuka-Revue/</url>
    
    <content type="html"><![CDATA[<h2 id="一选题原因">一、选题原因</h2><p>  老师在课上介绍宝冢歌剧团时，提问我们是如何了解到“宝冢”这个名字的，当时我回答是从一部番剧了解的，这部番剧即本文分析涉及的2021新番“歌剧少女”。歌剧作为本门课程中重要的课题，我希望结合宝冢歌剧团和这部番剧来进行一些歌剧文化方面的探讨。</p><h2 id="二宝冢歌剧团">二、宝冢歌剧团</h2><p>  与歌舞伎全部为男性演员相反，日本宝冢歌剧以全员女性的形式为观众演绎各种各样的浪漫爱情故事。自大正年间创立以来宝冢已有百年历史，如今分为各具特色的“花、月、雪、星、宙”五个组，可简单总结其特色为歌舞之花、戏剧之月、和物之雪、装扮之星、年轻之宙。宝冢的歌剧题材来源极其广泛，服装和舞台效果也非常还原所演绎的故事设定。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded" aria-label="易巧丽.华丽旖旎的女性之梦谈日本宝冢歌剧中的多元化[J].中国戏剧,2021(03):83-84.">[1]</span></a></sup></p><p>  宝冢歌剧一个重要的特色是男役演员，为了向以已婚女性主妇为主体的观众展现其“大男主”题材的爱情故事，舞台的核心即男役演员需要展现出完美的男性魅力。宝冢歌剧通过瑰丽的舞台，为女性观众们编织了完美与浪漫的爱情之梦。</p><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main/img/2022/takarazuka/Takarazuka-Revue-1.png" width="300"><center>宝冢歌剧团首席男役</center></center><h2 id="三歌剧少女">三、歌剧少女</h2><p>  番剧“歌剧少女”是一部歌剧相关题材的漫改动画，于2021年7月开始放送。剧中的红华歌剧学院即现实中的宝冢音乐学院，且许多专有名词，如男役、娘役、预科生等，以及戏剧名和相关文化特色均是直接还原现实中的宝冢文化，个人认为在设定上对宝冢的还原度相对较高。</p><p>  放送完结的第一季对应原作的前日谈部分，介绍了几位不同背景的预科生各自的过往和相互建立羁绊的故事。有意思的是，剧中主要角色的背景还涉及了歌舞伎和偶像文化等。与少女漫画或偶像企划（如lovelive）不同，本剧细致描写了各个同学在学院学习歌剧的跌宕起伏的经历，并且在细节上较好的还原了宝冢音乐学院的特色（如学生间的阶级制度和各种道具等）。</p><p>  “歌剧少女”的片尾曲很有宝冢的歌剧特色，经过调查发现音乐部分是由在宝塚歌剧团工作过的齐藤恒芳先生完成作词、作曲、编曲的。在字幕表中能看到不少宝冢的OG也有演出。<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="“音乐学院舞台，描写青春友情，《歌剧少女!!》制片人诹访丰的访谈”.https://www.bilibili.com/read/cv12419830.">[2]</span></a></sup></p><center><img src="https://cdn.jsdelivr.net/gh/Judera9/Pictures-for-Blogs@main/img/2022/takarazuka/Takarazuka-Revue-2.png" width="300"><center>歌剧少女宣传封面</center></center><h2 id="四宝冢歌剧文化的创新与魅力">四、宝冢歌剧文化的创新与魅力</h2><p>  <em>“一般文化的寿命是50年，50年过后，即便不消失也不再是大众之物。”</em></p><p>  随着互大众传媒的发展，娱乐的形式和观赏娱乐的方式都在不断扩张，许多曾经流行的艺术也在逐渐淡出历史舞台。这并不是一件坏事，毕竟艺术源于生活，而当一种艺术已经与当代人的生活脱钩时，这种艺术也不再能引起人们的共鸣。如为了迎合当下快节奏的生活方式而诞生出的“短视频”文化，而像豫剧、河北梆子等这种地方戏剧没有跟上时代的改变并迎合现代人的喜好，便逐渐在戏剧的历史舞台上消逝。</p><p>  我认为宝冢歌剧是成功迎合新时代的文化之一，我认为主要原因有两点。</p><p>  首先是题材上的创新，在电视刚开始流行的时候，宝冢歌剧遭遇了严重的打击，而她们顶住舆论的压力，用一部《凡尔赛玫瑰》成功背水一战重新焕发生机。而后来她们也尝试去改编各种各样的题材，包括古代历史、近代风物、当代故事、甚至关于未来想象，容纳了中国、阿拉伯、印度等各个国家的文化，改编自歌剧、话剧、影视剧、漫画、小说、历史传说、神话故事等；</p><p>  其次是系统的演员培养方式和优秀的团内文化，很多人真正粉上宝冢歌剧不是由于戏剧本身，而是由于舞台上绚丽多姿的演员们，尤其是男役演员。所谓“男役十年”，即培养一个优秀的男役演员需要十年的功夫来模仿、沉淀和学习，从而演绎出“女性眼中最完美的男性”。其次，在宝冢音乐学院里，学生不仅要学习各种歌剧表演方面的技能和知识，更加重要的是对气质的培养，即“清正美”的形象和态度。</p><h2 id="五歌剧少女与宝冢歌剧">五、歌剧少女与宝冢歌剧</h2><p>  在讨论宝冢歌剧的魅力时，上面提到了宝冢歌剧团演员的培养和团内文化，而这方面的魅力如何才能展现在大众的面前呢？如何能将宝冢歌剧团内日复一日的枯燥练习，与背后每个团员的故事与经历呈现在大众面前呢？歌剧少女这部番剧，就很好的做到了这一点。</p><p>  制片人诹访丰在访谈中提到，他原本对歌剧并不熟悉，而是在看了原作漫画后对其产生兴趣，<em>“实际去观看了歌剧后，发现非常有趣。我觉得就像是这样的我一样，如果能通过作品，给其他人制造一个契机，会是非常好的一件事，这也是企划立项原因之一。”</em><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="“音乐学院舞台，描写青春友情，《歌剧少女!!》制片人诹访丰的访谈”.https://www.bilibili.com/read/cv12419830.">[2]</span></a></sup></p><p>  实际上，这是一种很好的扩大戏剧影响力的方式，和在论坛中有同学讨论关于游戏原神的角色云瑾与京剧文化的结合相似。歌剧少女通过二次元番剧和漫画的形式，将宝冢歌剧文化浓缩为一个个角色背后生动的故事，故事中的主角即为台上的演员。通过这些或是感人、或是引人发笑的故事，将宝冢歌剧团的魅力更是加深一层，也使得更多原本对宝冢不了解的人们能够来尝试观看歌剧，并找到其中的乐趣。</p><p>  举个例子说明，番剧中有一段关于身材焦虑与催吐的剧情，最终在老师的开导下该角色走出了焦虑。我认为这类的焦虑其实在宝冢歌剧团和一些偶像团体中并不少见，但观众和饭们平时不会对此有深刻的体会。而在观看番剧的过程中，观众们能够认识到这些演员们平时不能在大众面前表现的一面，从而使现实中的演员的人设更加丰富具体。</p><h2 id="参考">参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>易巧丽.华丽旖旎的女性之梦谈日本宝冢歌剧中的多元化[J].中国戏剧,2021(03):83-84.<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2"class="footnote-text"><span>“音乐学院舞台，描写青春友情，《歌剧少女!!》制片人诹访丰的访谈”.https://www.bilibili.com/read/cv12419830.<a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>知识科普</category>
      
      <category>课程相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>戏剧</tag>
      
      <tag>番剧</tag>
      
      <tag>宝冢</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
